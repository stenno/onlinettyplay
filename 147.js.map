{"version":3,"file":"147.js","mappings":"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Q,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MA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","sources":["webpack://my-webpack-project/./node_modules/node-ansiparser/dist/ansiparser.js","webpack://my-webpack-project/./node_modules/node-ansiterminal/dist/ansiterminal.js","webpack://my-webpack-project/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://my-webpack-project/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://my-webpack-project/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://my-webpack-project/./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack://my-webpack-project/./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack://my-webpack-project/./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack://my-webpack-project/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://my-webpack-project/./node_modules/@babel/runtime/helpers/esm/typeof.js"],"sourcesContent":["(function () {\n    'use strict';\n\n    /**\n     * range function for numbers [a, .., b-1]\n     *\n     * @param {number} a\n     * @param {number} b\n     * @return {Array}\n     */\n    function r(a, b) {\n        var c = b - a;\n        var arr = new Array(c);\n        while (c--)\n            arr[c] = --b;\n        return arr;\n    }\n\n    /**\n     * Add a transition to the transition table.\n     *\n     * @param table - table to add transition\n     * @param {number} inp - input character code\n     * @param {number} state - current state\n     * @param {number=} action - action to be taken\n     * @param {number=} next - next state\n     */\n    function add(table, inp, state, action, next) {\n        table[state<<8|inp] = ((action | 0) << 4) | ((next === undefined) ? state : next);\n    }\n\n    /**\n     * Add multiple transitions to the transition table.\n     *\n     * @param table - table to add transition\n     * @param {Array} inps - array of input character codes\n     * @param {number} state - current state\n     * @param {number=} action - action to be taken\n     * @param {number=} next - next state\n     */\n    function add_list(table, inps, state, action, next) {\n        for (var i=0; i<inps.length; i++)\n            add(table, inps[i], state, action, next);\n    }\n\n    /** global definition of printables and executables */\n    var PRINTABLES = r(0x20, 0x7f);\n    var EXECUTABLES = r(0x00, 0x18);\n    EXECUTABLES.push(0x19);\n    EXECUTABLES.concat(r(0x1c, 0x20));\n\n    /* meaning of state and action indices\n        var STATES = [\n            'GROUND',\n            'ESCAPE',\n            'ESCAPE_INTERMEDIATE',\n            'CSI_ENTRY',\n            'CSI_PARAM',\n            'CSI_INTERMEDIATE',\n            'CSI_IGNORE',\n            'SOS_PM_APC_STRING',\n            'OSC_STRING',\n            'DCS_ENTRY',\n            'DCS_PARAM',\n            'DCS_IGNORE',\n            'DCS_INTERMEDIATE',\n            'DCS_PASSTHROUGH'\n        ];\n        var ACTIONS = [\n            'ignore',\n            'error',\n            'print',\n            'execute',\n            'osc_start',\n            'osc_put',\n            'osc_end',\n            'csi_dispatch',\n            'param',\n            'collect',\n            'esc_dispatch',\n            'clear',\n            'dcs_hook',\n            'dcs_put',\n            'dcs_unhook'\n        ];\n     */\n\n    /**\n     * create the standard transition table - used by all parser instances\n     *\n     *     table[state << 8 | character code] = action << 4 | next state\n     *\n     *     - states are indices of STATES (0 to 13)\n     *     - control character codes defined from 0 to 159 (C0 and C1)\n     *     - actions are indices of ACTIONS (0 to 14)\n     *     - any higher character than 159 is handled by the 'error' action\n     */\n    var TRANSITION_TABLE = (function() {\n        var t = new Uint8Array(4095);\n\n        // table with default transition [any] --> [error, GROUND]\n        for (var state=0; state<14; ++state) {\n            for (var code=0; code<160; ++code) {\n                t[state<<8|code] = 16;\n            }\n        }\n\n        // apply transitions\n        // printables\n        add_list(t, PRINTABLES, 0, 2);\n        // global anywhere rules\n        for (state=0; state<14; ++state) {\n            add_list(t, [0x18, 0x1a, 0x99, 0x9a], state, 3, 0);\n            add_list(t, r(0x80, 0x90), state, 3, 0);\n            add_list(t, r(0x90, 0x98), state, 3, 0);\n            add(t, 0x9c, state, 0, 0);   // ST as terminator\n            add(t, 0x1b, state, 11, 1);  // ESC\n            add(t, 0x9d, state, 4, 8);   // OSC\n            add_list(t, [0x98, 0x9e, 0x9f], state, 0, 7);\n            add(t, 0x9b, state, 11, 3);  // CSI\n            add(t, 0x90, state, 11, 9);  // DCS\n        }\n        // rules for executables and 7f\n        add_list(t, EXECUTABLES, 0, 3);\n        add_list(t, EXECUTABLES, 1, 3);\n        add(t, 0x7f, 1);\n        add_list(t, EXECUTABLES, 8);\n        add_list(t, EXECUTABLES, 3, 3);\n        add(t, 0x7f, 3);\n        add_list(t, EXECUTABLES, 4, 3);\n        add(t, 0x7f, 4);\n        add_list(t, EXECUTABLES, 6, 3);\n        add_list(t, EXECUTABLES, 5, 3);\n        add(t, 0x7f, 5);\n        add_list(t, EXECUTABLES, 2, 3);\n        add(t, 0x7f, 2);\n        // osc\n        add(t, 0x5d, 1, 4, 8);\n        add_list(t, PRINTABLES, 8, 5);\n        add(t, 0x7f, 8, 5);\n        add_list(t, [0x9c, 0x1b, 0x18, 0x1a, 0x07], 8, 6, 0);\n        add_list(t, r(0x1c, 0x20), 8, 0);\n        // sos/pm/apc does nothing\n        add_list(t, [0x58, 0x5e, 0x5f], 1, 0, 7);\n        add_list(t, PRINTABLES, 7);\n        add_list(t, EXECUTABLES, 7);\n        add(t, 0x9c, 7, 0, 0);\n        // csi entries\n        add(t, 0x5b, 1, 11, 3);\n        add_list(t, r(0x40, 0x7f), 3, 7, 0);\n        add_list(t, r(0x30, 0x3a), 3, 8, 4);\n        add(t, 0x3b, 3, 8, 4);\n        add_list(t, [0x3c, 0x3d, 0x3e, 0x3f], 3, 9, 4);\n        add_list(t, r(0x30, 0x3a), 4, 8);\n        add(t, 0x3b, 4, 8);\n        add_list(t, r(0x40, 0x7f), 4, 7, 0);\n        add_list(t, [0x3a, 0x3c, 0x3d, 0x3e, 0x3f], 4, 0, 6);\n        add_list(t, r(0x20, 0x40), 6);\n        add(t, 0x7f, 6);\n        add_list(t, r(0x40, 0x7f), 6, 0, 0);\n        add(t, 0x3a, 3, 0, 6);\n        add_list(t, r(0x20, 0x30), 3, 9, 5);\n        add_list(t, r(0x20, 0x30), 5, 9);\n        add_list(t, r(0x30, 0x40), 5, 0, 6);\n        add_list(t, r(0x40, 0x7f), 5, 7, 0);\n        add_list(t, r(0x20, 0x30), 4, 9, 5);\n        // esc_intermediate\n        add_list(t, r(0x20, 0x30), 1, 9, 2);\n        add_list(t, r(0x20, 0x30), 2, 9);\n        add_list(t, r(0x30, 0x7f), 2, 10, 0);\n        add_list(t, r(0x30, 0x50), 1, 10, 0);\n        add_list(t, [0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x59, 0x5a, 0x5c], 1, 10, 0);\n        add_list(t, r(0x60, 0x7f), 1, 10, 0);\n        // dcs entry\n        add(t, 0x50, 1, 11, 9);\n        add_list(t, EXECUTABLES, 9);\n        add(t, 0x7f, 9);\n        add_list(t, r(0x1c, 0x20), 9);\n        add_list(t, r(0x20, 0x30), 9, 9, 12);\n        add(t, 0x3a, 9, 0, 11);\n        add_list(t, r(0x30, 0x3a), 9, 8, 10);\n        add(t, 0x3b, 9, 8, 10);\n        add_list(t, [0x3c, 0x3d, 0x3e, 0x3f], 9, 9, 10);\n        add_list(t, EXECUTABLES, 11);\n        add_list(t, r(0x20, 0x80), 11);\n        add_list(t, r(0x1c, 0x20), 11);\n        add_list(t, EXECUTABLES, 10);\n        add(t, 0x7f, 10);\n        add_list(t, r(0x1c, 0x20), 10);\n        add_list(t, r(0x30, 0x3a), 10, 8);\n        add(t, 0x3b, 10, 8);\n        add_list(t, [0x3a, 0x3c, 0x3d, 0x3e, 0x3f], 10, 0, 11);\n        add_list(t, r(0x20, 0x30), 10, 9, 12);\n        add_list(t, EXECUTABLES, 12);\n        add(t, 0x7f, 12);\n        add_list(t, r(0x1c, 0x20), 12);\n        add_list(t, r(0x20, 0x30), 12, 9);\n        add_list(t, r(0x30, 0x40), 12, 0, 11);\n        add_list(t, r(0x40, 0x7f), 12, 12, 13);\n        add_list(t, r(0x40, 0x7f), 10, 12, 13);\n        add_list(t, r(0x40, 0x7f), 9, 12, 13);\n        add_list(t, EXECUTABLES, 13, 13);\n        add_list(t, PRINTABLES, 13, 13);\n        add(t, 0x7f, 13);\n        add_list(t, [0x1b, 0x9c], 13, 14, 0);\n\n        return t;\n    })();\n\n\n    /**\n     *  AnsiParser - Parser for ANSI terminal escape sequences.\n     *\n     * @param {Object=} terminal emulation object\n     * @constructor\n     */\n    function AnsiParser(terminal) {\n        this.initial_state = 0;  // 'GROUND' is default\n        this.current_state = this.initial_state|0;\n\n        // clone global transition table\n        this.transitions = new Uint8Array(4095);\n        this.transitions.set(TRANSITION_TABLE);\n\n        // global non pushable buffers for multiple parse invocations\n        this.osc = '';\n        this.params = [0];\n        this.collected = '';\n\n        // back reference to terminal\n        this.term = terminal || {};\n        var instructions = ['inst_p', 'inst_o', 'inst_x', 'inst_c',\n            'inst_e', 'inst_H', 'inst_P', 'inst_U', 'inst_E'];\n        for (var i=0; i<instructions.length; ++i)\n            if (!(instructions[i] in this.term))\n                this.term[instructions[i]] = function() {};\n    }\n\n    /**\n     * Reset the parser.\n     */\n    AnsiParser.prototype.reset = function() {\n        this.current_state = this.initial_state|0;\n        this.osc = '';\n        this.params = [0];\n        this.collected = '';\n    };\n\n    /**\n     * Parse string s.\n     * @param {string} s\n     */\n    AnsiParser.prototype.parse = function(s) {\n        var code = 0,\n            transition = 0,\n            error = false,\n            current_state = this.current_state|0;\n\n        // local buffers\n        var printed = -1;\n        var dcs = -1;\n        var osc = this.osc;\n        var collected = this.collected;\n        var params = this.params;\n\n        // process input string\n        for (var i=0, l=s.length|0; i<l; ++i) {\n            code = s.charCodeAt(i)|0;\n            // shortcut for most chars (print action)\n            if (current_state===0 && code>0x1f && code<0x80) {\n                printed = (printed + 1) ? printed|0: i|0;\n                continue;\n            }\n            transition = ((code < 0xa0) ? (this.transitions[(current_state<<8|code)|0])|0 : 16)|0;\n            switch ((transition >> 4)|0) {\n                case 2: // print\n                    printed = (printed + 1) ? printed|0: i|0;\n                    break;\n                case 3: // execute\n                    if (printed + 1) {\n                        this.term.inst_p(s.substring(printed, i));\n                        printed = -1;\n                    }\n                    this.term.inst_x(String.fromCharCode(code));\n                    break;\n                case 0: // ignore\n                    // handle leftover print and dcs chars\n                    if (printed + 1) {\n                        this.term.inst_p(s.substring(printed, i));\n                        printed = -1;\n                    } else if (dcs + 1) {\n                        this.term.inst_P(s.substring(dcs, i));\n                        dcs = -1;\n                    }\n                    break;\n                case 1: // error\n                    // handle unicode chars in write buffers w'o state change\n                    if (code > 0x9f) {\n                        switch (current_state) {\n                            case 0: // GROUND -> add char to print string\n                                printed = (!(printed+1)) ? i|0 : printed|0;\n                                break;\n                            case 8: // OSC_STRING -> add char to osc string\n                                osc += String.fromCharCode(code);\n                                transition = (transition | 8)|0;\n                                break;\n                            case 6: // CSI_IGNORE -> ignore char\n                                transition = (transition | 6)|0;\n                                break;\n                            case 11: // DCS_IGNORE -> ignore char\n                                transition = (transition | 11)|0;\n                                break;\n                            case 13: // DCS_PASSTHROUGH -> add char to dcs\n                                if (!(dcs + 1))\n                                    dcs = i|0;\n                                transition = (transition | 13)|0;\n                                break;\n                            default: // real error\n                                error = true;\n                        }\n                    } else { // real error\n                        error = true;\n                    }\n                    if (error) {\n                        if (this.term.inst_E(\n                                {\n                                    pos: i,                 // position in parse string\n                                    character: String.fromCharCode(code), // wrong character\n                                    state: current_state,   // in state\n                                    print: printed,         // print buffer\n                                    dcs: dcs,               // dcs buffer\n                                    osc: osc,               // osc buffer\n                                    collect: collected,     // collect buffer\n                                    params: params          // params buffer\n                                })) {\n                            return;\n                        }\n                        error = false;\n                    }\n                    break;\n                case 7: // csi_dispatch\n                    this.term.inst_c(collected, params, String.fromCharCode(code));\n                    break;\n                case 8: // param\n                    if (code === 0x3b)\n                        params.push(0);\n                    else\n                        params[params.length-1] = (params[params.length-1] * 10 + code - 48)|0;\n                    break;\n                case 9: // collect\n                    collected += String.fromCharCode(code);\n                    break;\n                case 10: // esc_dispatch\n                    this.term.inst_e(collected, String.fromCharCode(code));\n                    break;\n                case 11: // clear\n                    if (printed + 1) {\n                        this.term.inst_p(s.substring(printed, i));\n                        printed = -1;\n                    }\n                    osc = '';\n                    params = [0];\n                    collected = '';\n                    dcs = -1;\n                    break;\n                case 12: // dcs_hook\n                    this.term.inst_H(collected, params, String.fromCharCode(code));\n                    break;\n                case 13: // dcs_put\n                    if (!(dcs + 1))\n                        dcs = i|0;\n                    break;\n                case 14: // dcs_unhook\n                    if (dcs + 1) {\n                        this.term.inst_P(s.substring(dcs, i));\n                    }\n                    this.term.inst_U();\n                    if (code === 0x1b)\n                        transition = (transition | 1)|0;\n                    osc = '';\n                    params = [0];\n                    collected = '';\n                    dcs = -1;\n                    break;\n                case 4: // osc_start\n                    if (~printed) {\n                        this.term.inst_p(s.substring(printed, i));\n                        printed = -1;\n                    }\n                    osc = '';\n                    break;\n                case 5: // osc_put\n                    osc += s.charAt(i);\n                    break;\n                case 6: // osc_end\n                    if (osc && code !== 0x18 && code !== 0x1a)\n                        this.term.inst_o(osc);\n                    if (code === 0x1b)\n                        transition = (transition | 1)|0;\n                    osc = '';\n                    params = [0];\n                    collected = '';\n                    dcs = -1;\n                    break;\n            }\n            current_state = (transition & 15)|0;\n        }\n\n        // push leftover pushable buffers to terminal\n        if (!current_state && (printed + 1)) {\n            this.term.inst_p(s.substring(printed));\n        } else if (current_state===13 && (dcs + 1)) {\n            this.term.inst_P(s.substring(dcs));\n        }\n\n        // save non pushable buffers\n        this.osc = osc;\n        this.collected = collected;\n        this.params = params;\n\n        // save state\n        this.current_state = current_state|0;\n    };\n\n    /* istanbul ignore next */\n    if (typeof module !== 'undefined'\n        && typeof module.exports !== 'undefined') {\n        module.exports = AnsiParser;\n    } else {\n        if (typeof define === 'function' && define.amd) {\n            define([], function() {return AnsiParser;});\n        } else {\n            window.AnsiParser = AnsiParser;\n        }\n    }\n})();","\n/**\n * AnsiTerminal - an offscreen xterm like terminal.\n *\n *  TODO:\n *\n *  - unicode tests\n *  - move box printing chars to frontend\n *  - create output methods for TChar and AnsiTerminal\n *  - bracketed paste mode\n *  - tabs, tab stops, tab width, tab output\n *  - tons of DCS codes\n *  - advanced tests, vttest\n *  - mouse handling goes here (via registering handler callbacks)\n *  - test cases\n */\n\n/**\n * @module node-ansiterminal\n * @exports node-ansiterminal\n * @typicalname ansiterminal\n * @example\n * ```js\n * var ansiterminal = require('node-ansiterminal')\n * ```\n */\n(function() {\n    'use strict';\n\n    /* typedefs */\n    /**\n     * @typedef TColors\n     * @type Object\n     * @property {boolean} set  - true if color is set\n     * @property {boolean} RGB  - true if color is in RGB mode\n     * @property {array} color  - [R, G, B] or [color value, unused, unused]\n     */\n\n    /**\n     * @typedef TAttributes\n     * @type Object\n     * @property {boolean} bold\n     * @property {boolean} italic\n     * @property {boolean} underline\n     * @property {boolean} blink\n     * @property {boolean} inverse\n     * @property {boolean} conceal\n     * @property {module:node-ansiterminal~TColors} foreground\n     * @property {module:node-ansiterminal~TColors} background\n     */\n\n    /**\n     * @typedef TJSONColors\n     * @type Object\n     * @property {string} mode          - '256' or 'RGB'\n     * @property {number|array} color   - [R, G, B] for 'RGB' mode\n     */\n\n    /**\n     * @typedef TJSONAttributes\n     * @type Object\n     * @property {boolean} bold\n     * @property {boolean} italic\n     * @property {boolean} underline\n     * @property {boolean} blink\n     * @property {boolean} inverse\n     * @property {boolean} conceal\n     * @property {module:node-ansiterminal~TJSONColors|false} foreground\n     * @property {module:node-ansiterminal~TJSONColors|false} background\n     */\n\n    /**\n     * @typedef JSONTRow\n     * @type Object\n     * @property {string} string                - sub string\n     * @property {width} width                  - print space of string\n     * @property {module:node-ansiterminal~TJSONAttributes} attributes   - text attributes\n     */\n\n    /**\n     * Calculate print space of a string. The returned number denotes the taken\n     * halfwidth space.\n     * @note    Terminals and fonts may behave differently for some codepoints since unicode\n     *          knows more widths than half and full width.\n     * @param {string} s - single character or string\n     * @return {number} halfwidth length of the string\n     * @function module:node-ansiterminal.wcswidth\n     * @example\n     * ```js\n     * > var wcswidth = require('node-ansiterminal').wcswidth\n     * undefined\n     * > wcswidth('￥￥￥￥￥')\n     * 10\n     * ```\n     */\n    var wcswidth = (function() {\n\n        /*\n         * taken from:\n         * - http://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c\n         * - wcwidth node module\n         */\n\n        var _WIDTH_COMBINING = [\n            [0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489],\n            [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2],\n            [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603],\n            [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670],\n            [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED],\n            [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A],\n            [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902],\n            [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D],\n            [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981],\n            [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD],\n            [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C],\n            [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D],\n            [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC],\n            [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD],\n            [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C],\n            [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D],\n            [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0],\n            [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48],\n            [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC],\n            [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD],\n            [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D],\n            [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6],\n            [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E],\n            [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC],\n            [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35],\n            [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E],\n            [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97],\n            [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030],\n            [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039],\n            [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F],\n            [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753],\n            [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD],\n            [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD],\n            [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922],\n            [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B],\n            [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34],\n            [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42],\n            [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF],\n            [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063],\n            [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F],\n            [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B],\n            [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F],\n            [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB],\n            [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\n            [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\n            [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\n            [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\n            [0xE0100, 0xE01EF]\n        ];\n\n        function _width_bisearch(ucs) {\n            var min = 0;\n            var max = _WIDTH_COMBINING.length - 1;\n            var mid;\n            if (ucs < _WIDTH_COMBINING[0][0] || ucs > _WIDTH_COMBINING[max][1])\n                return false;\n            while (max >= min) {\n                mid = Math.floor((min + max) / 2);\n                if (ucs > _WIDTH_COMBINING[mid][1])\n                    min = mid + 1;\n                else if (ucs < _WIDTH_COMBINING[mid][0])\n                    max = mid - 1;\n                else\n                    return true;\n            }\n            return false;\n        }\n\n        function _width_wcwidth(ucs, opts) {\n            // test for 8-bit control characters\n            if (ucs === 0)\n                return opts.nul;\n            if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0))\n                return opts.control;\n            // binary search in table of non-spacing characters\n            if (_width_bisearch(ucs))\n                return 0;\n            // if we arrive here, ucs is not a combining or C0/C1 control character\n            return 1 +\n                (ucs >= 0x1100 &&\n                (ucs <= 0x115f ||                       // Hangul Jamo init. consonants\n                ucs == 0x2329 || ucs == 0x232a ||\n                (ucs >= 0x2e80 && ucs <= 0xa4cf &&\n                ucs != 0x303f) ||                     // CJK ... Yi\n                (ucs >= 0xac00 && ucs <= 0xd7a3) ||    // Hangul Syllables\n                (ucs >= 0xf900 && ucs <= 0xfaff) ||    // CJK Compatibility Ideographs\n                (ucs >= 0xfe10 && ucs <= 0xfe19) ||    // Vertical forms\n                (ucs >= 0xfe30 && ucs <= 0xfe6f) ||    // CJK Compatibility Forms\n                (ucs >= 0xff00 && ucs <= 0xff60) ||    // Fullwidth Forms\n                (ucs >= 0xffe0 && ucs <= 0xffe6) ||\n                (ucs >= 0x20000 && ucs <= 0x2fffd) ||\n                (ucs >= 0x30000 && ucs <= 0x3fffd)));\n        }\n\n        var _WIDTH_DEFAULTS = {nul: 0, control: 0};\n\n        // wcswidth(string[, opts]) - number of taken terminal cells by a string (printed space)\n        function wcswidth(str, opts) {\n            opts = _WIDTH_DEFAULTS; // FIXME\n            if (typeof str !== 'string')\n                return _width_wcwidth(str, opts);\n            var s = 0;\n            for (var i = 0; i < str.length; i++) {\n                // FIXME: apply patch for high unicode chars (see print_p)\n                var n = _width_wcwidth(str.charCodeAt(i), opts);\n                if (n < 0)\n                    return -1;\n                s += n;\n            }\n            return s\n        }\n\n        return wcswidth;\n    })();\n\n    /**\n     * @classdesc A TChar is a terminal character with text attributes and width.\n     * In the terminal emulator it represents a terminal cell in a TRow.\n     * The actual character is saved in `c`.\n     *\n     * `width` is the printed space of the character according to unicode.\n     * It can be 1 (halfwidth codepoints), 2 (fullwidth codepoints)\n     * or 0 (as intermediate state after a fullwidth codepoint).\n     * `width` always defaults to 1 and is not calculated upon initialization.\n     * The correct width value is set by the emulator while processing\n     * a printable character.\n     *\n     * For small memory footprint and quick state changes a TChar object stores\n     * the text attributes in the 2 4-byte numbers `attr` and `gb`.\n     *\n     * Bits of `attr`:\n     *\n     *       1-8     background color in 256 mode / background RED in RGB mode\n     *       9-16    foreground color in 256 mode / foreground RED in RGB mode\n     *       17      bold\n     *       18      italic\n     *       19      underline\n     *       20      blink\n     *       21      inverse\n     *       22      conceal\n     *       23      cursor (not set by default)\n     *       24      <unused>\n     *       25      background set (for 256 and RGB mode)\n     *       26      background in RGB mode (true for RGB, false for 256)\n     *       27      foreground set (for 256 and RGB mode)\n     *       28      foreground in RGB mode (true for RGB, false for 256)\n     *       29-32   <unused>\n     *\n     * Bits of `gb`:\n     *\n     *       1-8         background BLUE in RGB mode\n     *       9-16        foreground BLUE in RGB mode\n     *       17-24       background GREEN in RGB mode\n     *       25-32       foreground GREEN in RGB mode\n     * \n     * @param {string} c        - unicode character (multiple if surrogate or combining)\n     * @param {number} attr     - text attributes as integer\n     * @param {number} gb       - green and blue part of RGB as integer\n     * @param {number} width    - printed space of character\n     * @property {string} c     - unicode character (multiple if surrogate or combining)\n     * @property {number} attr  - text attributes as integer\n     * @property {number} gb    - green and blue part of RGB as integer\n     * @property {number} width - printed space of character\n     * @constructor module:node-ansiterminal.TChar\n     * @typicalname tchar\n     */\n    function TChar(c, attr, gb, width) {\n        this.c = c;\n        this.attr = attr | 0;\n        this.gb = gb | 0;\n        this.width = (width === undefined) ? 1 : width;\n    }\n\n    /**\n     * Clone a TChar object.\n     * @return {module:node-ansiterminal.TChar}\n     * @method module:node-ansiterminal.TChar#clone\n     */\n    TChar.prototype.clone = function() {\n        return new TChar(this.c, this.attr, this.gb, this.width);\n    };\n\n    /**\n     * Test equality of TChar.\n     * @param {module:node-ansiterminal.TChar} other\n     * @return {boolean}\n     * @method module:node-ansiterminal.TChar#equals\n     */\n    TChar.prototype.equals = function(other) {\n        return ( other instanceof TChar\n            && this.c==other.c\n            && this.attr==other.attr\n            && this.gb==other.gb\n            && this.width==other.width)\n    };\n\n    /**\n     * Serialize a TChar.\n     * @return {Array}\n     * @method module:node-ansiterminal.TChar#serialize\n     */\n    TChar.prototype.serialize = function() {\n        return [this.c, this.attr, this.gb, this.width];\n    };\n\n    /**\n     * Deserialize a serialization object to TChar.\n     * @param {object} o\n     * @return {module:node-ansiterminal.TChar}\n     * @method module:node-ansiterminal.TChar.deserialize\n     */\n    TChar.deserialize = function(o) {\n        return new TChar(o[0], o[1], o[2], o[3]);\n    };\n\n    /**\n     * Get all text attributes in a readable manner.\n     * The attributes object may contain left over color values\n     * of a former RGB setting. This is due to the way xterm\n     * handles those values internally. For cleaned attributes\n     * see {@link module:node-ansiterminal.TChar#getJSONAttributes}\n     * @return {module:node-ansiterminal~TAttributes}\n     * @method module:node-ansiterminal.TChar#getAttributes\n     */\n    TChar.prototype.getAttributes = function() {\n        var colorbits = this.attr >>> 24;\n        var r = this.attr & 65535;\n        var g = this.gb >>> 16;\n        var b = this.gb & 65535;\n        var bits = this.attr >>> 16 & 255;\n        return {\n            bold: !!(bits & 1),\n            italic: !!(bits & 2),\n            underline: !!(bits & 4),\n            blink: !!(bits & 8),\n            inverse: !!(bits & 16),\n            conceal: !!(bits & 32),\n            //cursor: !!(bits & 64),\n            foreground: {\n                set: !!(colorbits & 4),\n                RGB: !!(colorbits & 8),\n                color: [r>>>8, g>>>8, b>>>8]\n            },\n            background: {\n                set: !!(colorbits & 1),\n                RGB: !!(colorbits & 2),\n                color: [r&255, g&255, b&255]\n            }\n        }\n    };\n\n    /**\n     * Get all text attributes in a readable manner without state internals.\n     * Use this in favour of {@link module:node-ansiterminal.TChar#getAttributes} if you need\n     * the attributes in a clean way without remnant color values.\n     *\n     * Except the colors all attributes are simple boolean values.\n     * The color attributes default to false and will turn into an object\n     * with a `mode` and a `color` attribute if a color is set. For mode '256'\n     * the color will be a single integer indicating the color in the 256 color scheme.\n     * For mode 'RGB' color is an array with the RGB color values.\n     *\n     * NOTE: The simple 8bit colors are not directly supported by the terminal emulator.\n     * They will be translated to the lower colors of the 256 color scheme.\n     *\n     * Example output with a foreground color set:\n     * ```js\n     * {\n     *     bold: false,\n     *     italic: false,\n     *     underline: false,\n     *     blink: false,\n     *     inverse: false,\n     *     conceal: false,\n     *     foreground: {mode: '256', color: 12},\n     *     background: false\n     * }\n     * ```\n     * @return {module:node-ansiterminal~TJSONAttributes}\n     * @method module:node-ansiterminal.TChar#getJSONAttributes\n     */\n    TChar.prototype.getJSONAttributes = function() {\n        var colorbits = this.attr >>> 24;\n        var r = this.attr & 65535;\n        var g = this.gb >>> 16;\n        var b = this.gb & 65535;\n        var bits = this.attr >>> 16 & 255;\n        var attr = {\n            bold: !!(bits & 1),\n            italic: !!(bits & 2),\n            underline: !!(bits & 4),\n            blink: !!(bits & 8),\n            inverse: !!(bits & 16),\n            conceal: !!(bits & 32),\n            foreground: false,\n            background: false\n        };\n        if (colorbits & 4) {\n            attr.foreground = {};\n            if (colorbits & 8) {\n                attr.foreground['mode'] = 'RGB';\n                attr.foreground['color'] = {r: r>>>8, g: g>>>8, b: b>>>8};\n            } else {\n                attr.foreground['mode'] = '256';\n                attr.foreground['color'] = r>>>8;\n            }\n        }\n        if (colorbits & 1) {\n            attr.background = {};\n            if (colorbits & 2) {\n                attr.background['mode'] = 'RGB';\n                attr.background['color'] = {r: r&255, g: g&255, b: b&255};\n            } else {\n                attr.background['mode'] = '256';\n                attr.background['color'] = r&255;\n            }\n        }\n        return attr;\n    };\n\n    /**\n     * Set the text attributes. The parameter must be in the form of the output\n     * of {@link module:node-ansiterminal.TChar#getAttributes}.\n     * @param {module:node-ansiterminal~TAttributes} attributes\n     * @method module:node-ansiterminal.TChar#setAttributes\n     */\n    TChar.prototype.setAttributes = function(attributes) {\n        if (attributes === 0) {\n            this.attr = 0;\n            this.gb = 0;\n            return\n        }\n        var attr = this.attr;\n        ['bold', 'italic', 'underline', 'blink', 'inverse', 'conceal'].map(function(el, i) {\n            if (attributes[el] !== undefined)\n                attr = (attributes[el]) ? attr | (2<<(15+i)) : attr & ~(2<<(15+i));\n        });\n        if (attributes['foreground']) {\n            var foreground = attributes['foreground'];\n            if (foreground['set'] !== undefined)\n                attr = (foreground['set']) ? attr | (2<<25) : attr & ~(2<<25);\n            if (foreground['RGB'] !== undefined)\n                attr = (foreground['RGB']) ? attr | (2<<26) : attr & ~(2<<26);\n            if (foreground['color'] !== undefined) {\n                attr = (attr & ~65280) | (foreground['color'][0] << 8);\n                this.gb = (this.gb & ~4278190080) | (foreground['color'][1] << 24);\n                this.gb = (this.gb & ~65280) | (foreground['color'][2] << 8);\n            }\n        }\n        if (attributes['background']) {\n            var background = attributes['background'];\n            if (background['set'] !== undefined)\n                attr = (background['set']) ? attr | (2<<23) : attr & ~(2<<23);\n            if (background['RGB'] !== undefined)\n                attr = (background['RGB']) ? attr | (2<<24) : attr & ~(2<<24);\n            if (background['color'] !== undefined) {\n                attr = (attr & ~255) | (background['color'][0]);\n                this.gb = (this.gb & ~16711680) | (background['color'][1] << 16);\n                this.gb = (this.gb & ~255) | background['color'][2];\n            }\n        }\n        this.attr = attr;\n    };\n\n    /**\n     * Trim right of '\\x00'.\n     * '\\x00' is used as an intermediate placeholder for empty cells\n     * by the TRow output methods.\n     * @param {string} s\n     * @return {string}\n     */\n    function trimRight(s) {\n        return s.replace(/[\\x00]+$/,\"\");\n    }\n\n    var _uniqueId = 0;\n    /**\n     * The constructor will create `length` cells of cloned `tchar` objects.\n     *\n     * @classdesc A TRow contains single terminal cells (TChar) in `cells`.\n     * The global unique ID `uniqueId` will never change for an existing TRow.\n     * The `version` attributes will be incremented by the terminal emulator\n     * upon changes. This can be used to implement a partial refresh of a view output.\n     *\n     * @param {number} length       - amount of cells to create\n     * @param {module:node-ansiterminal.TChar} tchar - base object to be cloned as initial\n     * @property {array} cells      - array containing the single {@link TChar} objects\n     * @property {number} uniqueId  - global unique id of the row object\n     * @property {number} version   - incremented by emulator upon changes\n     * @constructor module:node-ansiterminal.TRow\n     */\n    function TRow(length, tchar) {\n        this.uniqueId = _uniqueId++|0;\n        this.version = 1;\n        this.doubled = 0;  // 0 - normal, 1 - width, 3 - height top, 4 - height bottom\n        this.overflow = 0;\n        this.cells = [];\n        for (var i=0; i<length; ++i) {\n            //this.cells.push(tchar.clone()); // to slow?\n            this.cells.push(new TChar(tchar.c, tchar.attr, tchar.gb, tchar.width));\n        }\n    }\n\n    /**\n     * Serialize a TRow.\n     * @return {Array}\n     * @method module:node-ansiterminal.TRow#serialize\n     */\n    TRow.prototype.serialize = function() {\n        var result = {content: [], attributes: {doubled: this.doubled}};\n        for (var i=0; i<this.cells.length; ++i)\n            result.content.push(this.cells[i].serialize());\n        return result;\n    };\n\n    /**\n     * Deserialize a TRow.\n     * @param o\n     * @return {module:node-ansiterminal.TRow}\n     * @method module:node-ansiterminal.TRow.deserialize\n     */\n    TRow.deserialize = function(o) {\n        var row = new TRow(0, null);\n        for (var i=0;i< o.content.length; ++i)\n            row.cells.push(TChar.deserialize(o.content[i]));\n        row.doubled = o.attributes.doubled;\n        return row;\n    };\n\n    /**\n     * String representation of TRow.\n     * @param {object} opts\n     * @return {string}\n     * @method module:node-ansiterminal.TRow#toString\n     */\n    TRow.prototype.toString = function(opts) {\n        // set options\n        var options = {\n            rtrim: true,\n            empty_cell: ' '  // non break space\n        };\n        if (opts) {\n            if (opts.hasOwnProperty('rtrim'))\n                options.rtrim = opts.rtrim;\n            if (opts.hasOwnProperty('empty_cell'))\n                options.empty_cell = opts.empty_cell;\n        }\n        var s = '';\n        for (var i=0; i<this.cells.length; ++i) {\n            s += this.cells[i].c || '\\x00';\n        }\n        if (options.rtrim)\n            s = trimRight(s);\n        return s.replace(/\\x00/g, options.empty_cell);\n    };\n\n    /**\n     * Array representation of merged TChars objects with same text attributes.\n     * @param opts\n     * @return {Array} array of merged TChar objects\n     * @method module:node-ansiterminal.TRow#toMergedArray\n     */\n    TRow.prototype.toMergedArray = function(opts) {\n        // set options\n        var options = {\n            rtrim: false,\n            empty_cell: '\\xa0'  // non break space\n        };\n        if (opts) {\n            if (opts.hasOwnProperty('rtrim'))\n                options.rtrim = opts.rtrim;\n            if (opts.hasOwnProperty('empty_cell'))\n                options.empty_cell = opts.empty_cell;\n        }\n\n        // build tchar stack\n        var stack = [];\n        if (!this.cells.length)\n            return stack;\n        var tchar = null;\n        var length = this.cells.length;\n        if (this.doubled)\n            length = parseInt(length/2);\n        var elem = this.cells[0].clone();\n        elem.c = elem.c || '\\x00';\n        for (var i=1; i<length; ++i) {\n            tchar = this.cells[i];\n            if ((elem.attr !== tchar.attr)) {\n                stack.push(elem);\n                elem = tchar.clone();\n                elem.c = elem.c || '\\x00';\n            } else if (tchar.width) {\n                elem.c += tchar.c || '\\x00';\n                elem.width += tchar.width;\n            }\n        }\n        stack.push(elem);\n\n        // rtrim\n        if (options.rtrim) {\n            while (stack.length) {\n                var last = stack.pop();\n                var s = trimRight(last.c);\n                if (s.length) {\n                    last.width -= last.c.length - s.length;\n                    last.c = s;\n                    stack.push(last);\n                    break;\n                }\n            }\n        }\n\n        // fill empty cells\n        for (i=0; i<stack.length; ++i) {\n            stack[i].c = stack[i].c.replace(/\\x00/g, options.empty_cell);\n        }\n        return stack;\n    };\n\n    /**\n     * Drilled down JSON representation of a TRow.\n     * Returns objects of sub strings with distinct text attributes.\n     * @note The print space width is summed up.\n     * @param opts\n     * @return {module:node-ansiterminal~JSONTRow}\n     * @method module:node-ansiterminal.TRow#toJSON\n     */\n    TRow.prototype.toJSON = function(opts) {\n        var json = {content: [], attributes: {doubled: this.doubled}};\n        var stack = this.toMergedArray(opts);\n        var tchar = null;\n        for (var i=0; i<stack.length; ++i) {\n            tchar = stack[i];\n            json.content.push({\n                string: tchar.c,\n                width: tchar.width,\n                attributes: tchar.getJSONAttributes()});\n        }\n        return json;\n    };\n\n    function _get_escape_string(attr_old, attr_new, gb_old, gb_new) {\n        var bits = (attr_new >>> 16) & 255;\n        var diff = ((attr_old >>> 16) & 255) ^ bits;\n        var colorbits = attr_new >>> 24;\n        var r = attr_new & 65535;\n        var result = [];\n\n        if (diff) {\n            if (diff & 1)  result.push((bits & 1)  ? 1 : 22);  // bold\n            if (diff & 2)  result.push((bits & 2)  ? 3 : 23);  // italic\n            if (diff & 4)  result.push((bits & 4)  ? 4 : 24);  // underline\n            if (diff & 8)  result.push((bits & 8)  ? 5 : 25);  // blink\n            if (diff & 16) result.push((bits & 16) ? 7 : 27);  // inverse\n            if (diff & 32) result.push((bits & 32) ? 8 : 28);  // conceal\n        }\n\n        // colors\n        if ((attr_old >>> 24)^colorbits || (attr_old & 65535)^r || gb_old^gb_new) {\n            if (colorbits & 4) {      // foreground\n                if (colorbits & 8) {  // RGB\n                    result.push(38, 2, r>>>8, gb_new>>>24, (gb_new&65535)>>>8);\n                } else {\n                    result.push(38, 5, (bits & 1) ? (r>>>8)|8 : r>>>8);\n                }\n            } else {  // unset\n                if (attr_old&67108864)\n                    result.push(39);\n            }\n            if (colorbits & 1) {      // background\n                if (colorbits & 2) {  // RGB\n                    result.push(48, 2, r&255, (gb_new>>>16)&255, gb_new&255);\n                } else {\n                    result.push(48, 5, r&255);\n                }\n            } else {  // unset\n                if (attr_old&16777216)\n                    result.push(49);\n            }\n        }\n        return result.join(';');\n    }\n\n    /**\n     * String representation of TRow with escape codes.\n     * @param opts\n     * @return {string}\n     * @method module:node-ansiterminal.TRow#toEscapeString\n     */\n    TRow.prototype.toEscapeString = function(opts) {\n        var s = '\\x1b[0m';\n        switch (this.doubled) {\n            case 0:\n                s += '\\x1b#5';\n                break;\n            case 1:\n                s += '\\x1b#6';\n                break;\n            case 3:\n                s += '\\x1b#3';\n                break;\n            case 4:\n                s += '\\x1b#4';\n        }\n        var stack = this.toMergedArray(opts);\n        var tchar = null;\n        var old_attr = 0;\n        var old_gb = 0;\n        for (var i=0; i<stack.length; ++i) {\n            tchar = stack[i];\n            s += '\\x1b[' + (\n                    (tchar.attr)\n                        ? _get_escape_string(old_attr, tchar.attr, old_gb, tchar.gb)\n                        : '0'\n                ) + 'm';\n            s += tchar.c;\n            old_attr = tchar.attr;\n            old_gb = tchar.gb;\n        }\n        if (old_attr)\n            s += '\\x1b[0m';\n        return s;\n    };\n\n    var _DEFAULT_COLORS = [\n        '#000000', '#cd0000', '#00cd00', '#cdcd00',\n        '#0000ee', '#cd00cd', '#00cdcd', '#e5e5e5',\n        '#7f7f7f', '#ff0000', '#00ff00', '#ffff00',\n        '#5c5cff', '#ff00ff', '#00ffff', '#ffffff'];\n\n    /**\n     * Default color mapper function with xterm colorset in white on black.\n     * @param value\n     * @return {string} hex color string\n     * @function module:node-ansiterminal.get_color\n     */\n    function get_color(value) {\n        if (value == 'foreground')  // default foreground color\n            return '#ffffff';\n        if (value == 'background')  // default background color\n            return '#000000';\n        if (value < 16) {\n            return _DEFAULT_COLORS[value];\n        }\n        // extended colors\n        if (value < 232) {\n            var digits = [0, 95, 135, 175, 215, 255];\n            value -= 16;\n            var result = 0;\n            for (var i=0; i<3; ++i) {\n                result += digits[(value % 6)] << (i*8);\n                value = parseInt(value/6);\n            }\n            result = result.toString(16);\n            return '#' + Array(6-result.length+1).join('0') + result;\n        }\n        // grey values\n        var base = 8 + (value-232) * 10;\n        return '#' + (base + (base << 8) + (base << 16)).toString(16);\n    }\n\n    function _get_html_styles(attr, options) {\n        var style_ = '';\n        var class_ = '';\n        if (options.classes) {\n            if (attr.bold)      class_ += 'bold ';\n            if (attr.italic)    class_ += 'italic ';\n            if (attr.underline) class_ += 'underline ';\n            if (attr.blink)     class_ += 'blink ';\n            if (attr.conceal)   class_ += 'conceal ';\n        } else {\n            if (attr.bold)      style_ += 'font-weight:bold;';\n            if (attr.italic)    style_ += 'font-style:italic;';\n            if (attr.underline) style_ += 'font-decoration:underline;';\n            if (attr.blink)     style_ += 'visibility:hidden;animation: '\n                                            + options.blinkanimation\n                                            + ' 1s steps(1, start) infinite;';\n            if (attr.conceal)   style_ += 'visibility:hidden;';\n        }\n        if (attr.inverse) {\n            var tmp = attr.foreground;\n            attr.foreground = attr.background;\n            attr.background = tmp;\n        }\n        if (attr.foreground) {\n            if (attr.foreground.mode == 'RGB') {\n                style_ += 'color:rgb(';\n                style_ += attr.foreground.color.r;\n                style_ += ',';\n                style_ += attr.foreground.color.g;\n                style_ += ',';\n                style_ += attr.foreground.color.b;\n                style_ += ');';\n            } else {\n                var fg = attr.foreground.color;\n                if (attr.bold)\n                    fg = fg|8;\n                if (options.classes)\n                    class_ += 'fg' + fg + ' ';\n                else\n                    style_ += 'color:' + options.colors(fg) + ';';\n            }\n        } else if (attr.inverse) {\n            if (options.classes)\n                    class_ += 'fg-1 ';\n                else\n                    style_ += 'color:' + options.colors('background') + ';';\n        }\n        if (attr.background) {\n            if (attr.background.mode == 'RGB') {\n                style_ += 'background-color:rgb(';\n                style_ += attr.background.color.r;\n                style_ += ',';\n                style_ += attr.background.color.g;\n                style_ += ',';\n                style_ += attr.background.color.b;\n                style_ += ');';\n            } else {\n                if (options.classes)\n                    class_ += 'bg' + attr.background.color + ' ';\n                else\n                    style_ += 'background-color:' + options.colors(attr.background.color) + ';';\n            }\n        } else if (attr.inverse) {\n            if (options.classes)\n                class_ += 'bg-1 ';\n            else\n                style_ += 'background-color:' + options.colors('foreground') + ';';\n        }\n        if (class_)\n            class_ = ' class=\"' + class_.trim() + '\"';\n        if (style_)\n            style_ = ' style=\"' + style_.trim() + '\"';\n        return class_ + style_;\n    }\n\n    function _escape_html(s) {\n        return s\n            .replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#039;\");\n    }\n\n    // TODO: browser tests\n    function _apply_row_attributes(content, doubled, options) {\n        if (options.classes) {\n            var classnames = ['', 'dbl-width', '', 'dbl-height-top', 'dbl-height-bottom'];\n            return '<span class=\"' + classnames[doubled] + '\">' + content + '</span>';\n        }\n        var result = '';\n        switch (doubled) {\n            case 1:  // double width\n                result = '<span style=\"';\n                result += 'transform: scale(2,1);';\n                result += 'display: inline-block;';\n                result += 'margin-left:25%\">';\n                result += content;\n                result += '</span>';\n                break;\n            case 3:  // double height top\n                result = '<span style=\"';\n                result += 'display: inline-block;';\n                result += 'vertical-align:bottom;';\n                result += 'margin: -0.667em 25% 0.667em;';\n                result += 'overflow: hidden;';\n                result += 'transform: scale(2, 2);\">';\n                result += '<span style=\"display: inline-block;transform: translateY(0.5em);\">';\n                result += content;\n                result += '</span></span>';\n                break;\n            case 4:  // double height bottom\n                result = '<span style=\"';\n                result += 'display: inline-block;';\n                result += 'vertical-align:top;';\n                result += 'margin-left: 25%;';\n                result += 'overflow: hidden;';\n                result += 'transform: scale(2, 2);\">';\n                result += '<span style=\"display: inline-block;transform: translateY(-0.46em);\">';\n                result += content;\n                result += '</span></span>';\n        }\n        return result;\n    }\n\n    /**\n     * HTML string representation of TRow.\n     *\n     * The terminal string gets decorated by span elements with textattributes\n     * either set via class names or inline styles.\n     *\n     * Options are:\n     *\n     *     rtrim            Trim empty cells from right.\n     *                      Defaults to true.\n     *     empty_cell       Fill empty_cells with given string.\n     *                      Defaults to none break space character '\\xa0'.\n     *     blinkanimation   CSS animation class name. Since an animation in CSS\n     *                      can't be declared inline, this is mandatory for\n     *                      classes false.\n     *     classes          Use CSS classes (true) or inline styles (false).\n     *                      The class names are: 'blink', 'italic',\n     *                      'underline', 'blink', 'conceal', 'fgX', 'bgX'\n     *                      For foreground and background colors the 'X'\n     *                      is the number of a 256 color table, e.g. 'fg134'.\n     *                      Default foreground and background colors have\n     *                      no class name. Therefore inverted default colors\n     *                      are named as 'fg-1' and 'bg-1'.\n     *                      Defaults to true.\n     *     colors           Customizable callback for inline colors.\n     *                      The callback has to support one parameter as\n     *                      color number from 0..255 or the keywords\n     *                      'foreground' or 'background' for default colors).\n     *                      The default callback uses the xterm colorset.\n     *     escape_html      Escape html characters in terminal string.\n     *                      Default is true.\n     *\n     * @param opts\n     * @return {string} HTML string\n     * @method module:node-ansiterminal.TRow#toHTML\n     */\n    TRow.prototype.toHTML = function(opts) {\n        // set options\n        var options = {\n            rtrim: true,\n            empty_cell: '\\xa0',\n            blinkanimation: 'blink',\n            classes: true,\n            colors: get_color,\n            escape_html: true\n        };\n        if (opts) {\n            var parts = ['rtrim', 'empty_cell', 'blinkanimation', 'colors', 'classes'];\n            for (var p=0; p<parts.length; ++p) {\n                if (opts.hasOwnProperty(parts[p]))\n                    options[parts[p]] = opts[parts[p]];\n            }\n        }\n\n        var stack = this.toMergedArray(options);\n\n        // build html string\n        var html = '';\n        var tchar = null;\n        for (var i=0; i<stack.length; ++i) {\n            tchar = stack[i];\n            if (tchar.attr)\n                html += '<span' + _get_html_styles(tchar.getJSONAttributes(), options) + '>';\n            html += (options.escape_html) ? _escape_html(tchar.c) : tchar.c;\n            if (tchar.attr)\n                html += '</span>';\n        }\n        if (this.doubled)\n            return _apply_row_attributes(html, this.doubled, options);\n        return html;\n    };\n\n    /**\n     * TScreen - represents a terminal screen with cols and rows.\n     *\n     * .buffer is an array of length rows and contains the row objects.\n     *\n     * @param cols\n     * @param rows\n     * @param scrollLength\n     * @constructor\n     */\n    function TScreen(cols, rows, scrollLength) {\n        this.rows = rows;\n        this.cols = cols;\n        this.scrollLength = (scrollLength==Infinity) ? 2147483647 : (scrollLength|0);\n\n        this.buffer = [];\n        this.scrollbuffer = [];\n\n        this.reset();\n    }\n\n    TScreen.prototype.reset = function() {\n        this.buffer = [];\n        this.scrollbuffer = [];\n        var row;\n        for (var i = 0; i < this.rows; ++i) {\n            row = new TRow(this.cols, new TChar(''));\n            this.buffer.push(row);\n        }\n    };\n\n    TScreen.prototype.serialize = function() {\n        var i;\n        var serialized_buffer = [];\n        var serialized_scrollbuffer = [];\n        for (i=0; i<this.buffer.length; ++i)\n            serialized_buffer.push(this.buffer[i].serialize());\n        for (i=0; i<this.scrollbuffer.length; ++i)\n            serialized_scrollbuffer.push(this.scrollbuffer[i].serialize());\n        return {\n            cols: this.cols,\n            rows: this.rows,\n            scrollLength: this.scrollLength,\n            buffer: serialized_buffer,\n            scrollbuffer: serialized_scrollbuffer\n        }\n    };\n    TScreen.deserialize = function(o) {\n        var i;\n        var sb = new TScreen(0, 0, 0);\n        sb.rows = o.rows;\n        sb.cols = o.cols;\n        sb.scrollLength = o.scrollLength;\n        for (i=0; i<sb.rows; ++i)\n            sb.buffer.push(TRow.deserialize(o.buffer[i]));\n        for (i=0; i<sb.scrollLength; ++i)\n            sb.scrollbuffer.push(TRow.deserialize(o.scrollbuffer[i]));\n        return sb;\n    };\n\n    TScreen.prototype.appendToScrollBuffer = function(row) {\n        this.scrollbuffer.push(row);\n        while (this.scrollbuffer.length > this.scrollLength)\n            this.scrollbuffer.shift();\n    };\n    TScreen.prototype.fetchFromScrollBuffer = function() {\n        return this.scrollbuffer.pop();\n    };\n    TScreen.prototype.resize = function(cols, rows, cursor) {\n        // xterm behavior - shrink:\n        //      delete higher rows til cursor then lowest to scrollbuffer\n        // xterm behavior - enlarge:\n        //      fill lowest from scrollbuffer then append new at end\n\n        // assume xterm handles alternate buffer the same way\n        // in respect of the cursor position but w/o scrolling\n\n        // shrink height\n        if (rows < this.rows) {\n            while (this.buffer.length > rows)\n                if (this.buffer.length > cursor.row+1)\n                    this.buffer.pop();\n                else {\n                    this.appendToScrollBuffer(this.buffer.shift());\n                    cursor.row -= 1;\n                }\n        }\n        // enlarge height\n        if (rows > this.rows) {\n            while (this.buffer.length < rows) {\n                var row = this.fetchFromScrollBuffer();\n                if (row) {\n                    this.buffer.unshift(row);\n                    cursor.row += 1;\n                }\n                else {\n                    row = new TRow(this.cols, new TChar(''));\n                    this.buffer.push(row);\n                }\n            }\n        }\n        if (cursor.row >= rows)\n            cursor.row = rows - 1;\n\n        var i;\n        // shrink width\n        if (cols < this.cols) {\n            for (i=0; i<this.buffer.length; ++i) {\n                var remove = this.cols - cols;\n                do {\n                    this.buffer[i].cells.pop();\n                } while (--remove);\n                this.buffer[i].version++;\n            }\n            for (i=0; i<this.scrollbuffer.length; ++i) {\n                remove = this.cols - cols;\n                do {\n                    this.scrollbuffer[i].cells.pop();\n                } while (--remove);\n                this.scrollbuffer[i].version++;\n            }\n        }\n        // enlarge width\n        if (cols > this.cols) {\n            for (i=0; i<this.buffer.length; ++i) {\n                var append = cols - this.cols;\n                do {\n                    this.buffer[i].cells.push(new TChar(''));\n                } while (--append);\n                this.buffer[i].version++;\n            }\n            for (i=0; i<this.scrollbuffer.length; ++i) {\n                append = cols - this.cols;\n                do {\n                    this.scrollbuffer[i].cells.push(new TChar(''));\n                } while (--append);\n                this.scrollbuffer[i].version++;\n            }\n        }\n        if (cursor.col >= cols)\n            cursor.col = cols - 1;\n\n        this.rows = rows;\n        this.cols = cols;\n    };\n\n    // experimental resize with line wrapping reflow\n    // TODO: make less expensive\n    TScreen.prototype.resize_reflow = function(cols, rows, cursor) {\n        var line = 0, cell = 0, tchar = null;\n\n        // build temp array with overflown lines merged\n        var temp_ar = [[]];\n        var a_line = temp_ar[temp_ar.length - 1];\n        for (line=0; line<this.scrollbuffer.length; ++line) {\n            for (cell=0; cell<this.cols; ++cell) {\n                tchar = this.scrollbuffer[line].cells[cell];\n                a_line.push(tchar);\n            }\n            if (!this.scrollbuffer[line].overflow) {\n                temp_ar.push([]);\n                a_line = temp_ar[temp_ar.length - 1];\n            }\n        }\n        for (line=0; line<this.rows; ++line) {\n            for (cell=0; cell<this.cols; ++cell) {\n                tchar = this.buffer[line].cells[cell];\n                a_line.push(tchar);\n            }\n            if (!this.buffer[line].overflow) {\n                temp_ar.push([]);\n                a_line = temp_ar[temp_ar.length - 1];\n            }\n        }\n\n        // right trim temp\n        for (var i=0; i<temp_ar.length; ++i) {\n            var right = temp_ar[i].pop();\n            while (right && right.c =='' && right.width==1)\n                right = temp_ar[i].pop();\n            if (right && right.c !='')\n                temp_ar[i].push(right);\n        }\n\n        // bottom trim temp\n        var bottom = temp_ar.pop();\n        while (bottom && !bottom.length)\n            bottom = temp_ar.pop();\n        if (bottom)\n            temp_ar.push(bottom);\n\n        // transfer data\n        var final_buffer = [];\n        for (line=0; line<temp_ar.length; ++line) {\n            var trow = new TRow(cols, new TChar(''));\n            var offset = 0;\n            for (cell=0; cell<temp_ar[line].length; ++cell) {\n                if (parseInt(cell/cols)>offset) {\n                    offset++;\n                    trow.overflow = 1;\n                    final_buffer.push(trow);\n                    trow = new TRow(cols, new TChar(''));\n                }\n                trow.cells[cell%cols] = temp_ar[line][cell];\n            }\n            final_buffer.push(trow);\n            trow = new TRow(cols, new TChar(''));\n        }\n\n        // adjust final buffer and scrollbuffer\n        this.scrollbuffer = [];\n        while (final_buffer.length<rows)\n            final_buffer.push(new TRow(cols, new TChar('')));\n        while (final_buffer.length>rows)\n            this.appendToScrollBuffer(final_buffer.shift());\n\n        this.buffer = final_buffer;\n        if (cursor.row >= rows)\n            cursor.row = rows - 1;\n        if (cursor.col >= cols)\n            cursor.col = cols - 1;\n\n        this.rows = rows;\n        this.cols = cols;\n    };\n\n    /** minimal support for switching charsets (only basic drawing symbols supported) */\n    // see http://www.vt100.net/charsets/technical.html for technical charset\n    var CHARSET_0 = {\n        '`': '◆', 'a': '▒', 'b': '␉', 'c': '␌', 'd': '␍',\n        'e': '␊', 'f': '°', 'g': '±', 'h': '␤', 'i': '␋',\n        'j': '┘', 'k': '┐', 'l': '┌', 'm': '└', 'n': '┼',\n        'o': '⎺', 'p': '⎻', 'q': '─', 'r': '⎼', 's': '⎽',\n        't': '├', 'u': '┤', 'v': '┴', 'w': '┬', 'x': '│',\n        'y': '≤', 'z': '≥', '{': 'π', '|': '≠', '}': '£', '~': '°'\n    };\n\n    /** fix: box drawing bold */// FIXME: should this go into frontend?\n    // since most monospace fonts can't handle bold on these right we have to\n    // switch to to corrensponding unicode character\n    var BOXSYMBOLS_BOLD = {\n        '─': '━', '│': '┃', '┄': '┅', '┆': '┇', '┈': '┉', '┊': '┋',\n        '┌': '┏', '┐': '┓', '└': '┗', '┘': '┛', '├': '┣', '┤': '┫',\n        '┬': '┳', '┴': '┻', '┼': '╋', '╌': '╍', '╎': '╏'\n    };\n\n    var TERM_STRING = {\n        CSI: '\\u001b[', SS3: '\\u001bO', DCS: '\\u001bP', ST: '\\u001b\\\\',\n        OSC: '\\u001b]', PM: '\\u001b^', APC: '\\u001b_'\n    };\n\n\n    /**\n     * The constructor creates a new terminal object with\n     * `cols` width and `rows` height. The `scrollLength` parameter\n     * is the max history length (number of lines) of the normal screen buffer.\n     *\n     * @classdesc AnsiTerminal - an offscreen xterm like terminal.\n     *\n     * The terminal implements the interface of node-ansiparser.\n     * Since the parser calls the methods directly this terminal has\n     * no direct input method. Use the parser's `parse(s)` method\n     * instead (see documentation of the parser and the example below).\n     *\n     * The terminal has no direct screen representation beside\n     * a `toString()` method for debug purposes.\n     * Use the output methods of the TRow primitive to build a view\n     * of the terminal content.\n     *\n     * Like xterm the terminal maintains 2 different screen buffers.\n     * The normal screen has a scrolling history while the alternate\n     * has none. Most simple programs operate on the normal\n     * screen while more advanced command line programs (e.g. curses based)\n     * use the alternate screen as a canvas. The current active\n     * screen is always accessible via the `screen` attribute.\n     * \n     * @param {number} cols - columns of the terminal.\n     * @param {number} rows - rows of the terminal.\n     * @param {number} scrollLength - lines of scrollbuffer.\n     * @constructor module:node-ansiterminal.AnsiTerminal\n     * @example\n     * ```js\n     * var AnsiTerminal = require('node-ansiterminal').AnsiTerminal;\n     * var AnsiParser = require('node-ansiparser');\n     * var terminal = new AnsiTerminal(80, 25, 500);\n     * var parser = new AnsiParser(terminal);\n     * parser.parse('\\x1b[31mHello World!\\x1b[0m');\n     * console.log(terminal.toString());\n     * ```\n     */\n    // TODO: move cursor abstraction to TScreen\n    // TODO: implement terminal wide text attribute getter and setter (see TChar)\n    function AnsiTerminal(cols, rows, scrollLength) {\n        this.rows = rows;\n        this.cols = cols;\n        this.scrollLength = (scrollLength===Infinity) ? 2147483647 : (scrollLength|0);\n        this.send = function (s) {};                            // callback for writing back to stream\n        this.beep = function (tone, duration) {};               // callback for sending console beep\n        this.changedMouseHandling = function(mode, protocol){}; // announce changes in mouse handling\n\n        this.reset();\n    }\n\n    /**\n     * Hard reset of the terminal.\n     *\n     * @method module:node-ansiterminal.AnsiTerminal#reset\n     */\n    AnsiTerminal.prototype.reset = function () {\n        this.normal_screen = new TScreen(this.cols, this.rows, this.scrollLength);\n        this.alternate_screen = new TScreen(this.cols, this.rows, 0);\n        this.screen = this.normal_screen;\n        this.normal_cursor = {col: 0, row: 0};\n        this.alternate_cursor = {col: 0, row: 0};\n        this.cursor = this.normal_cursor;\n        this.textattributes = 0;\n        this.colors = 0;\n        this.charattributes = 0;\n        this.reverse_video = false;\n        \n        this.cursor_key_mode = false;\n        this.show_cursor = true;\n        this.title = '';                        // terminal title set by OSR\n        this.cursor_save = null;\n        this.insert_mode = false;               // IRM (default replace)\n        this.blinking_cursor = false;           // CSI?12l\n        this.scrolling_top = 0;                 // for DECSTBM\n        this.scrolling_bottom = this.rows;      // for DECSTBM\n        this.autowrap = true;                   // DECAWM\n        this.newline_mode = false;              // LNM\n        this.tab_width = 8;\n        this.last_char = '';                    // for REP\n        this.mouse_mode = 0;                    // tracking modes for mouse 0=off, (9, 1000, 1001, 1002, 1003)\n        this.mouse_protocol = 0;                // 0 (normal), 1005 (utf-8), 1006 (sgr), 1015 (decimal)\n\n        this.mouseDown = {1: false, 2:false, 3:false, 4:false};\n\n        this._rem_c = '';                       // remainder of surrogates\n\n        // new wrapping behavior\n        this.wrap = false;\n        this.row_wrap = false;\n\n        // DCS stuff\n        this.dcs_handler = null;\n        this.dcs_handlers = {};\n\n        // register standard DCS handlers\n        this.registerDCSHandler(DCS_DECRQSS, '$', 'q');\n\n        // character sets\n        this.G0 = null;\n        this.G1 = null;\n        this.charset = this.G0;\n        this.active_charset = 0;\n\n        // resize settings\n        this.reflow = false;  // experimental\n    };\n\n    /**\n     * String representation of active terminal buffer.\n     * @param opts\n     * @return {string}\n     * @method module:node-ansiterminal.AnsiTerminal#toString\n     */\n    AnsiTerminal.prototype.toString = function(opts) {\n        var s = '';\n        for (var i=0; i<this.screen.buffer.length; ++i) {\n            s += this.screen.buffer[i].toString(opts);\n            s += '\\n';\n        }\n        return s;\n    };\n\n    /**\n     * Resize terminal to cols x rows.\n     *  \n     * @param {number} cols     - new columns value\n     * @param {number} rows     - new rows value\n     * @method module:node-ansiterminal.AnsiTerminal#resize\n     */\n    AnsiTerminal.prototype.resize = function(cols, rows) {\n        var resize_func = (this.reflow) ? 'resize_reflow' : 'resize';\n\n        // skip insane values\n        if ((cols < 2) || (rows < 2))\n            return false;\n        \n        // normal scroll buffer\n        this.normal_screen[resize_func](cols, rows, this.normal_cursor);\n        \n        // alternative buffer\n        this.alternate_screen[resize_func](cols, rows, this.alternate_cursor);\n        \n        // set new rows / cols to terminal\n        this.rows = rows;\n        this.cols = cols;\n        // FIXME: how to deal with scrolling area? - simply reset for now\n        this.scrolling_top = 0;\n        this.scrolling_bottom = this.rows;\n\n        // if cursor got saved before we need to overwrite the saved values\n        if (this.cursor_save)\n            this.DECSC();\n    };\n\n    /**\n     * Register a DCS handler for `flag` and `collected`.\n     * The handler must follow the DCS \"interface\" with a `hook`, `feed` and\n     * `unhook` method (see {@link module:node-ansiterminal.DCS_Dummy}).\n     *\n     * @param {function} handler\n     * @param {string} collected\n     * @param {string} flag\n     * @method module:node-ansiterminal.AnsiTerminal#registerDCSHandler\n     */\n    AnsiTerminal.prototype.registerDCSHandler = function(handler, collected, flag) {\n        this.dcs_handlers[flag+collected] = handler;\n    };\n\n    /**\n     * Unregister a DCS handler.\n     *\n     * @param {function} handler    - previously registered handler\n     * @method module:node-ansiterminal.AnsiTerminal#unregisterDCSHandler\n     */\n    AnsiTerminal.prototype.unregisterDCSHandler = function(handler) {\n        for (var prop in this.dcs_handlers) {\n            if (this.dcs_handlers.hasOwnProperty(prop) && this.dcs_handlers[prop] === handler) {\n                delete this.dcs_handlers[prop];\n                break;\n            }\n        }\n    };\n\n\n    /** \n     * Implementation of the parser instructions\n     */\n\n    /**\n     * inst_p - handle printable characters\n     *\n     * The print implementation is aware of combining and surrogate characters and respects\n     * half and full width print space according to unicode.\n     *\n     * @param {string} s\n     * @method module:node-ansiterminal.AnsiTerminal#inst_p\n     */\n    AnsiTerminal.prototype.inst_p = function(s) {\n        if (this.debug)\n            console.log('inst_p', s);\n        var c = '',\n            code = 0,\n            low = 0,\n            width = 1;\n\n        // add leftover surrogate high\n        if (this._rem_c) {\n            s = this._rem_c + s;\n            this._rem_c = '';\n        }\n\n        for (var i=0; i< s.length; ++i) {\n            c = s.charAt(i);\n            code = s.charCodeAt(i);\n\n            // surrogate high\n            if (0xD800 <= code && code <= 0xDBFF) {\n                low = s.charCodeAt(i+1);\n                if (low !== low) {\n                    this._rem_c = c;\n                    return;\n                }\n                code = ((code - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n                c += s.charAt(i+1);\n            }\n            // surrogate low - already handled\n            if (0xDC00 <= code && code <= 0xDFFF)\n                continue;\n\n            width = wcswidth(code);\n\n            if (width==2 && (width + this.cursor.col) > this.cols) {\n                if (this.autowrap)\n                    this.wrap = true;\n                else\n                    continue;\n            }\n\n            if (this.wrap && width) {\n                this.cursor.col = 0;\n                this.screen.buffer[this.cursor.row].overflow = 1;  // mark line as overflown\n                this.cursor.row++;\n                this.wrap = false;\n            }\n            if (this.cursor.row >= this.scrolling_bottom) {\n                this.SU();\n                this.cursor.row--;\n            }\n            this.screen.buffer[this.cursor.row].version++;\n\n            if (!width && this.cursor.col) { // combining characters\n                if (this.wrap) {\n                    this.screen.buffer[this.cursor.row].cells[this.cursor.col].c += c;\n                } else {\n                    if (this.screen.buffer[this.cursor.row].cells[this.cursor.col - 1].width==0) {\n                        if ((this.cursor.col - 2 >= 0)\n                            && this.screen.buffer[this.cursor.row].cells[this.cursor.col - 2].width==2)\n                            this.screen.buffer[this.cursor.row].cells[this.cursor.col - 2].c += c;\n                    } else {\n                        this.screen.buffer[this.cursor.row].cells[this.cursor.col - 1].c += c;\n                    }\n                }\n            }\n            else {\n                c = (this.charset) ? (this.charset[c] || c) : c;\n                this.last_char = c;\n                if (this.insert_mode) {\n                    this.screen.buffer[this.cursor.row].cells.pop();\n                    this.screen.buffer[this.cursor.row].cells.splice(\n                        this.cursor.col, 0, new TChar('', this.textattributes, this.colors));\n                }\n                this.screen.buffer[this.cursor.row].cells[this.cursor.col].c = c;\n                this.screen.buffer[this.cursor.row].cells[this.cursor.col].attr = this.charattributes;\n                this.screen.buffer[this.cursor.row].cells[this.cursor.col].gb = this.colors;\n                this.screen.buffer[this.cursor.row].cells[this.cursor.col].width = width;\n\n                // fix box drawing -- this is a really ugly problem - FIXME: goes into frontend\n                if (c >= '\\u2500' && c <= '\\u2547') {\n                    if (this.textattributes && (this.textattributes & 65536)) {\n                        this.screen.buffer[this.cursor.row].cells[this.cursor.col].c = BOXSYMBOLS_BOLD[c] || c;\n                        // unset bold here, but set intense instead if applicable\n                        var attr = this.charattributes & ~65536;\n                        if (attr & 67108864 && !(attr & 134217728) && (attr >>> 8 & 255) < 8)\n                            attr |= 2048;\n                        this.screen.buffer[this.cursor.row].cells[this.cursor.col].attr = attr;\n                    }\n                }\n\n                this.cursor.col += 1;\n            }\n\n            if (width == 2) {\n                if (this.insert_mode) {\n                    this.screen.buffer[this.cursor.row].cells.pop();\n                    this.screen.buffer[this.cursor.row].cells.splice(\n                        this.cursor.col, 0, new TChar('', this.textattributes, this.colors));\n                    if (this.screen.buffer[this.cursor.row].cells[this.cols-1].width == 2) {\n                        this.screen.buffer[this.cursor.row].cells.pop();\n                        this.screen.buffer[this.cursor.row].cells.push(\n                            new TChar('', this.textattributes, this.colors)\n                        );\n                    }\n                }\n                this.screen.buffer[this.cursor.row].cells[this.cursor.col].width = 0;\n                this.screen.buffer[this.cursor.row].cells[this.cursor.col].c = '';\n                this.screen.buffer[this.cursor.row].cells[this.cursor.col].attr = this.charattributes;\n                this.screen.buffer[this.cursor.row].cells[this.cursor.col].gb = this.colors;\n                this.cursor.col += 1;\n                if (this.cursor.col >= this.cols) {\n                    this.cursor.col = this.cols - 2;\n                    if (this.autowrap) {\n                        this.wrap = true;\n                    }\n                }\n            }\n\n\n            if (this.cursor.col >= this.cols) {\n                this.cursor.col = this.cols - 1;\n                if (this.autowrap) {\n                    this.wrap = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * inst_o - handle OSC instruction\n     * @param s\n     * @method module:node-ansiterminal.AnsiTerminal#inst_o\n     */\n    AnsiTerminal.prototype.inst_o = function(s) {\n        if (this.debug)\n            console.log('inst_o', s);\n        this.last_char = '';\n        this._rem_c = '';\n        this.wrap = false;\n        if (s.charAt(0) == '0')\n            this.title = s.slice(2);\n        else\n            console.log('inst_o unhandled:', s);\n    };\n\n    /**\n     * inst_x - handle single character instruction\n     * @param flag\n     * @method module:node-ansiterminal.AnsiTerminal#inst_x\n     */\n    AnsiTerminal.prototype.inst_x = function (flag) {\n        if (this.debug)\n            console.log('inst_x', flag.charCodeAt(0), flag);\n        this.last_char = '';\n        this._rem_c = '';\n        this.wrap = false;\n        switch (flag) {\n            case '\\n':\n                this.screen.buffer[this.cursor.row].overflow = 0;\n                this.cursor.row++;\n                if (this.cursor.row >= this.scrolling_bottom) {\n                    this.SU();\n                    this.cursor.row--;\n                }\n                if (this.newline_mode)\n                    this.cursor.col = 0;\n                if (this.cursor.col >= this.cols)\n                    this.cursor.col--;\n                break;\n            case '\\r':\n                this.cursor.col = 0;\n                break;\n            case '\\t':    this.CHT([0]); break;\n            case '\\x07':  this.beep(); break;\n            case '\\x08':\n                if (this.cursor.col >= this.cols)\n                    this.cursor.col = this.cols - 1;\n                this.cursor.col -= 1;\n                if (this.cursor.col < 0)\n                    this.cursor.col = 0;\n                break;\n            case '\\x0b':  this.inst_x('\\n'); break;\n            case '\\x0c':  this.inst_x('\\n'); break;\n            case '\\x0e':                                // activate G1\n                this.charset = this.G1;\n                this.active_charset = 1;\n                break;\n            case '\\x0f':                                // activate G0\n                this.charset = this.G0;\n                this.active_charset = 0;\n                break;\n            case '\\x11':  console.log('unhandled DC1 (XON)'); break;  // TODO\n            case '\\x12':  break;  // DC2\n            case '\\x13':  console.log('unhandled DC3 (XOFF)'); break; // TODO\n            case '\\x14':  break;  // DC4\n            default:\n                console.log('inst_x unhandled:', flag.charCodeAt(0));\n        }\n    };\n\n    /**\n     * inst_c - handle CSI instruction\n     * @param collected\n     * @param params\n     * @param flag\n     * @method module:node-ansiterminal.AnsiTerminal#inst_c\n     */\n    AnsiTerminal.prototype.inst_c = function(collected, params, flag) {\n        if (this.debug)\n            console.log('inst_c', collected, params, flag);\n        if (flag != 'b')        // hack for getting REP working\n            this.last_char = '';\n        if (flag !== 'S' && flag !== 'T') { // FIXME: all but SD/SU reset wrap -> bug in xterm?\n            this._rem_c = '';\n            this.wrap = false;\n        }\n        switch (collected) {\n            case '':\n                switch (flag) {\n                    case '@':  return this.ICH(params);\n                    case 'E':  return this.CNL(params);\n                    case 'F':  return this.CPL(params);\n                    case 'G':  return this.CHA(params);\n                    case 'D':  return this.CUB(params);\n                    case 'B':  return this.CUD(params);\n                    case 'C':  return this.CUF(params);\n                    case 'A':  return this.CUU(params);\n                    case 'I':  return this.CHT(params);\n                    case 'Z':  return this.CBT(params);\n                    case 'f':\n                    case 'H':  return this.CUP(params);\n                    case 'P':  return this.DCH(params);\n                    case 'J':  return this.ED(params);\n                    case 'K':  return this.EL(params);\n                    case 'L':  return this.IL(params);\n                    case 'M':  return this.DL(params);\n                    case 'S':  return this.SU(params);\n                    case 'T':  return this.SD(params);\n                    case 'X':  return this.ECH(params);\n                    case 'a':  return this.HPR(params);\n                    case 'b':  return this.REP(params);\n                    case 'e':  return this.VPR(params);\n                    case 'd':  return this.VPA(params);\n                    case 'c':  return this.send(TERM_STRING['CSI'] + '?64;1;2;6;9;15;18;21;22c');  // DA1 TODO: DA1 function\n                    case 'h':  return this.high(collected, params);\n                    case 'l':  return this.low(collected, params);\n                    case 'm':  return this.SGR(params);\n                    case 'n':  return this.DSR(collected, params);\n                    case 'r':  return this.DECSTBM(params);\n                    case 's':  return this.DECSC();\n                    case 'u':  return this.DECRC();\n                    case '`':  return this.HPA(params);\n                    default :\n                        console.log('inst_c unhandled:', collected, params, flag);\n                }\n                break;\n            case '?':\n                switch (flag) {\n                    case 'J':  return this.ED(params);  // DECSED as normal ED\n                    case 'K':  return this.EL(params);  // DECSEL as normal EL\n                    case 'h':  return this.high(collected, params);\n                    case 'l':  return this.low(collected, params);\n                    case 'n':  return this.DSR(collected, params);\n                    default :\n                        console.log('inst_c unhandled:', collected, params, flag);\n                }\n                break;\n            case '>':\n                switch (flag) {\n                    case 'c':  return this.send(TERM_STRING['CSI'] + '>41;1;0c');  // DA2\n                    default :\n                        console.log('inst_c unhandled:', collected, params, flag);\n                }\n                break;\n            case '!':\n                switch (flag) {\n                    case 'p':  return this.DECSTR();\n                    default :\n                        console.log('inst_c unhandled:', collected, params, flag);\n                }\n                break;\n            default :\n                console.log('inst_c unhandled:', collected, params, flag);\n        }\n    };\n\n    /**\n     * inst_e - handle ESC instruction\n     * @param collected\n     * @param flag\n     * @method module:node-ansiterminal.AnsiTerminal#inst_e\n     */\n    AnsiTerminal.prototype.inst_e = function(collected, flag) {\n        if (this.debug)\n            console.log('inst_e', collected, flag);\n        this.last_char = '';\n        this._rem_c = '';\n        this.wrap = false;\n        if (!collected) {\n            switch (flag) {\n                //case '6':  // Back Index (DECBI), VT420 and up - not supported\n                case '7':  return this.DECSC();  // Save Cursor (DECSC)\n                case '8':  return this.DECRC();  // Restore Cursor (DECRC)\n                //case '9':  // Forward Index (DECFI), VT420 and up - not supported\n                case 'D':  return this.IND();    // Index (IND is 0x84)\n                case 'E':  return this.NEL();    // Next Line (NEL is 0x85)\n                //case 'H':  //    ESC H   Tab Set (HTS is 0x88)  // TODO\n                case 'M':  return this.RI();     // Reverse Index (RI is 0x8d)\n                //case 'N':  // Single Shift Select of G2 Character Set ( SS2 is 0x8e) - not supported\n                //case 'O':  // Single Shift Select of G3 Character Set ( SS3 is 0x8f) - not supported\n                //case 'P':  // Device Control String (DCS is 0x90) - covered by parser\n                //case 'V':  // Start of Guarded Area (SPA is 0x96) - not supported\n                //case 'W':  // End of Guarded Area (EPA is 0x97) - not supported\n                //case 'X':  // Start of String (SOS is 0x98) - covered by parser (unsupported)\n                //case 'Z':  // Return Terminal ID (DECID is 0x9a). Obsolete form of CSI c (DA).  - not supported\n                //case '[':  // Control Sequence Introducer (CSI is 0x9b) - covered by parser\n                //case '\\':  // String Terminator (ST is 0x9c) - covered by parser\n                //case ']':  //\tOperating System Command (OSC is 0x9d) - covered by parser\n                //case '^':  //\tPrivacy Message (PM is 0x9e) - covered by parser (unsupported)\n                //case '_':  //\tApplication Program Command (APC is 0x9f) - covered by parser (unsupported)\n                //case '=':  // Application Keypad (DECKPAM)  // TODO\n                //case '>':  // Normal Keypad (DECKPNM)  // TODO\n                //case 'F':  // Cursor to lower left corner of screen  // TODO\n                case 'c':  return this.reset();  // Full Reset (RIS) http://vt100.net/docs/vt220-rm/chapter4.html\n                //case 'l':  // Memory Lock (per HP terminals). Locks memory above the cursor. - not supported\n                //case 'm':  // Memory Unlock (per HP terminals). - not supported\n                //case 'n':  // Invoke the G2 Character Set as GL (LS2). - not supported\n                //case 'o':  // Invoke the G3 Character Set as GL (LS3). - not supported\n                //case '|':  // Invoke the G3 Character Set as GR (LS3R). - not supported\n                //case '}':  // Invoke the G2 Character Set as GR (LS2R). - not supported\n                //case '~':  // Invoke the G1 Character Set as GR (LS1R). - not supported\n                default :  console.log('inst_e unhandled:', collected, flag);\n            }\n        } else if (collected == ' ') {\n            switch (flag) {\n                //case 'F':  // (SP) 7-bit controls (S7C1T) - not supported\n                //case 'G':  // (SP) 8-bit controls (S8C1T) - not supported\n                //case 'L':  // (SP) Set ANSI conformance level 1 (dpANS X3.134.1) - not supported\n                //case 'M':  // (SP) Set ANSI conformance level 2 (dpANS X3.134.1) - not supported\n                //case 'N':  // (SP) Set ANSI conformance level 3 (dpANS X3.134.1) - not supported\n                default :  console.log('inst_e unhandled:', collected, flag);\n            }\n        } else if (collected == '#') {\n            switch (flag) {\n                case '3':  return this.DECDHL(3);  // (#) DEC double-height line, top half (DECDHL)\n                case '4':  return this.DECDHL(4);  // (#) DEC double-height line, bottom half (DECDHL)\n                case '5':  return this.DECSWL();  // (#) DEC single-width line (DECSWL)\n                case '6':  return this.DECDWL();  // (#) DEC double-width line (DECDWL)\n                case '8':  return this.DECALN();  // (#) DEC Screen Alignment Test (DECALN)\n                default :  console.log('inst_e unhandled:', collected, flag);\n            }\n        } else if (collected == '%') {\n            switch (flag) {\n                //case '@':  // (%) Select default character set. That is ISO 8859-1 (ISO 2022) - not supported\n                //case 'G':  // (%) Select UTF-8 character set (ISO 2022) - not supported\n                default :  this.charset = null;  // always reset charset\n            }\n        } else if (collected == '(') {\n            switch (flag) {\n                case '0':\n                    this.G0 = CHARSET_0;\n                    break;\n                default:\n                    this.G0 = null;\n            }\n            if (this.active_charset == 0)\n                this.charset = this.G0;\n        } else if (collected == ')') {\n            switch (flag) {\n                case '0':\n                    this.G1 = CHARSET_0;\n                    break;\n                default:\n                    this.G1 = null;\n            }\n            if (this.active_charset == 1)\n                this.charset = this.G1;\n        } else {\n            console.log('inst_e unhandled:', collected, flag);\n        }\n    };\n\n    /**\n     * inst_H - enter DCS handler state\n     * @param collected\n     * @param params\n     * @param flag\n     * @method module:node-ansiterminal.AnsiTerminal#inst_H\n     */\n    AnsiTerminal.prototype.inst_H = function(collected, params, flag) {\n        this.last_char = '';\n        this._rem_c = '';\n        this.wrap = false;\n        var Handler = this.dcs_handlers[flag+collected];\n        this.dcs_handler = (!Handler) ? DCS_Dummy() : Handler();\n        this.dcs_handler.hook(this, collected, params, flag);\n    };\n\n    /**\n     * inst_P - handle DCS data\n     * @param data\n     * @method module:node-ansiterminal.AnsiTerminal#inst_P\n     */\n    AnsiTerminal.prototype.inst_P = function(data) {\n        this.last_char = '';\n        this._rem_c = '';\n        this.wrap = false;\n        this.dcs_handler.feed(data);\n    };\n\n    /**\n     * inst_U - leave DCS handler state\n     * @method module:node-ansiterminal.AnsiTerminal#inst_U\n     */\n    AnsiTerminal.prototype.inst_U = function() {\n        this.last_char = '';\n        this._rem_c = '';\n        this.wrap = false;\n        this.dcs_handler.unhook();\n        this.dcs_handler = null;\n    };\n\n    /**\n     * functionality implementation\n     * * \n     * cheatsheets:\n     *  - http://www.inwap.com/pdp10/ansicode.txt\n     *  - overview http://www.vt100.net/docs/vt510-rm/chapter4\n     *  - http://paulbourke.net/dataformats/ascii/\n     *  - mouse support: http://manpages.ubuntu.com/manpages/intrepid/man4/console_codes.4.html\n     *  - sequences: http://docs2.attachmate.com/verastream/vhi/7.6sp1/en/index.jsp?\n     *      topic=%2Fcom.attachmate.vhi.help%2Fhtml%2Freference%2Fcontrol_functions_sortbysequ.xhtml\n     */\n\n    /**\n     * unhandled sequences: (mc - mouse support)\n     * \"inst_c unhandled:\" \"?\" Array [ 2004 ] \"h\"   bracketed paste mode https://cirw.in/blog/bracketed-paste\n     *\n     */\n\n    AnsiTerminal.prototype.DECDHL = function(param) {\n        this.screen.buffer[this.cursor.row].doubled = param;\n    };\n    AnsiTerminal.prototype.DECDWL = function() {\n        this.screen.buffer[this.cursor.row].doubled = 1;\n    };\n    AnsiTerminal.prototype.DECSWL = function() {\n        this.screen.buffer[this.cursor.row].doubled = 0;\n    };\n\n    /**\n     * DECALN - Screen Alignment Pattern\n     * @see {@link http://www.vt100.net/docs/vt510-rm/DECALN}\n     * @method module:node-ansiterminal.AnsiTerminal#DECALN\n     */\n    AnsiTerminal.prototype.DECALN = function() {\n        this.scrolling_top = 0;\n        this.scrolling_bottom = this.rows;\n        for (var i=0; i < this.screen.buffer.length; ++i) {\n            for (var j=0; j < this.screen.buffer[i].cells.length; ++j) {\n                this.screen.buffer[i].cells[j] = new TChar('E');\n            }\n        }\n        this.CUP([0, 0]);\n    };\n\n    /**\n     * SD - Scroll Down (Pan Up) - CSI Pn T\n     * Also SU moves scrolled out lines to scroll buffer, SD only adds new lines at the top.\n     * @see {@link http://vt100.net/docs/vt510-rm/SD}\n     * @param {Array} params - one numerical parameter (defaults to 1 even if 0 is given)\n     * @method module:node-ansiterminal.AnsiTerminal#SD\n     */\n    AnsiTerminal.prototype.SD = function (params) {\n        var lines = (params) ? (params[0] || 1) : 1;\n        do {\n            var row = new TRow(this.cols, new TChar('', this.textattributes, this.colors));\n            this.screen.buffer.splice(this.scrolling_top, 0, row);\n            this.screen.buffer.splice(this.scrolling_bottom, 1);\n        } while (--lines);\n    };\n\n    /**\n     * SU - Scroll Up (Pan Down) - CSI Pn S\n     * Scrolled out lines go into the scroll buffer.\n     * @see {@link http://vt100.net/docs/vt510-rm/SU}\n     * @param {Array} params - one numerical parameter (defaults to 1 even if 0 is given)\n     * @method module:node-ansiterminal.AnsiTerminal#SU\n     */\n    AnsiTerminal.prototype.SU = function (params) {\n        var lines = (params) ? (params[0] || 1) : 1;\n        do {\n            var row = new TRow(this.cols, new TChar('', this.textattributes, this.colors));\n            this.screen.buffer.splice(this.scrolling_bottom, 0, row);\n            var scrolled_out = this.screen.buffer.splice(this.scrolling_top, 1)[0];\n            if (!this.scrolling_top) {\n                this.screen.appendToScrollBuffer(scrolled_out);\n            }\n        } while (--lines);\n\n    };\n\n    /**\n     * REP - Repeat the preceding graphic character P s times (REP) - CSI Ps b\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#REP\n     */\n    // FIXME: hacky solution with this.last_char - needs unicode patch\n    AnsiTerminal.prototype.REP = function (params) {\n        var n = (params) ? (params[0] || 1) : 1;\n        if (this.last_char) {\n            var wrap = this.wrap;\n            if (this.cursor.col == this.cols - 1)\n                this.wrap = true;\n            this.inst_p(Array(n+1).join(this.last_char));\n            this.wrap = wrap;\n            this.last_char = '';\n        }\n    };\n\n    /**\n     * NEL - Next Line - ESC E\n     * @see {@link http://vt100.net/docs/vt510-rm/NEL}\n     * @method module:node-ansiterminal.AnsiTerminal#NEL\n     */\n    AnsiTerminal.prototype.NEL = function () {\n        this.IND();\n        this.cursor.col = 0;\n    };\n\n    /**\n     * IND - Index - ESC D\n     * @see {@link http://vt100.net/docs/vt510-rm/IND}\n     * @method module:node-ansiterminal.AnsiTerminal#IND\n     */\n    AnsiTerminal.prototype.IND = function () {\n        this.cursor.row++;\n        if (this.cursor.row >= this.scrolling_bottom) {\n            this.SU();\n            this.cursor.row--;\n        }\n    };\n\n    /**\n     * VPR - Vertical Position Relative - CSI Pn e\n     * @see {@link http://vt100.net/docs/vt510-rm/VPR}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#VPR\n     */\n    AnsiTerminal.prototype.VPR = function (params) {\n        this.cursor.row += ((params[0]) ? params[0] : 1);\n        if (this.cursor.row >= this.rows)\n            this.cursor.row = this.rows - 1;\n    };\n\n    /**\n     * HPR - Horizontal Position Relative - CSI Pn a\n     * @see {@link http://vt100.net/docs/vt510-rm/HPR}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#HPR\n     */\n    AnsiTerminal.prototype.HPR = function (params) {\n        this.cursor.col += ((params[0]) ? params[0] : 1);\n        if (this.cursor.col >= this.cols)\n            this.cursor.col = this.cols - 1;\n    };\n\n    /**\n     * HPA - Horizontal Position Absolute - CSI Pn '\n     * @see {@link http://vt100.net/docs/vt510-rm/HPA}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#HPA\n     */\n    AnsiTerminal.prototype.HPA = function (params) {\n        this.cursor.col = ((params[0]) ? params[0] : 1) - 1;\n        if (this.cursor.col >= this.cols)\n            this.cursor.col = this.cols - 1;\n    };\n\n    /**\n     * CBT - Cursor Backward Tabulation - CSI Pn Z\n     * @see {@link http://vt100.net/docs/vt510-rm/CBT}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#CBT\n     */\n    AnsiTerminal.prototype.CBT = function (params) {\n        this.cursor.col = (Math.floor((this.cursor.col - 1) / this.tab_width) + 1 -\n        ((params[0]) ? params[0] : 1)) * this.tab_width;\n        if (this.cursor.col < 0)\n            this.cursor.col = 0;\n    };\n\n    /**\n     * CHT - Cursor Horizontal Forward Tabulation - CSI Pn I\n     * @see {@link http://vt100.net/docs/vt510-rm/CHT}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#CHT\n     */\n    AnsiTerminal.prototype.CHT = function (params) {\n        this.cursor.col = (Math.floor(this.cursor.col / this.tab_width) +\n        ((params[0]) ? params[0] : 1)) * this.tab_width;\n        if (this.cursor.col >= this.cols)\n            this.cursor.col = this.cols - 1;\n    };\n\n    /**\n     * CPL - Cursor Previous Line - CSI Pn F\n     * @see {@link http://vt100.net/docs/vt510-rm/CPL}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#CPL\n     */\n    AnsiTerminal.prototype.CPL = function (params) {\n        this.cursor.row -= (params[0]) ? params[0] : 1;\n        if (this.cursor.row < 0)\n            this.cursor.row = 0;\n        this.cursor.col = 0;\n    };\n\n    /**\n     * CNL - Cursor Next Line - CSI Pn E\n     * @see {@link http://vt100.net/docs/vt510-rm/CNL}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#CNL\n     */\n    AnsiTerminal.prototype.CNL = function (params) {\n        this.cursor.row += (params[0]) ? params[0] : 1;\n        if (this.cursor.row >= this.rows)\n            this.cursor.row = this.rows - 1;\n        this.cursor.col = 0;\n    };\n\n    /**\n     * DL - Delete Line - CSI Pn M\n     * @see {@link http://vt100.net/docs/vt510-rm/DL}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#DL\n     */\n    AnsiTerminal.prototype.DL = function (params) {\n        var lines = params[0] || 1;\n        do {\n            this.screen.buffer.splice(this.cursor.row, 1);\n            var row = new TRow(this.cols, new TChar('', this.textattributes, this.colors));\n            this.screen.buffer.splice(this.scrolling_bottom - 1, 0, row);\n        } while (--lines);\n        this.cursor.col = 0; // see http://vt100.net/docs/vt220-rm/chapter4.html\n    };\n\n    /**\n     * ICH - Insert Character - CSI Pn @\n     * @see {@link http://vt100.net/docs/vt510-rm/ICH}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#ICH\n     */\n    AnsiTerminal.prototype.ICH = function (params) {\n        var chars = params[0] || 1;\n        do {\n            // FIXME ugly code - do splicing only once\n            this.screen.buffer[this.cursor.row].cells.splice(\n                this.cursor.col, 0, new TChar('', this.textattributes, this.colors));\n            this.screen.buffer[this.cursor.row].cells.pop();\n        } while (--chars);\n    };\n\n    /**\n     * VPA - Vertical Line Position Absolute - CSI Pn d\n     * @see {@link http://vt100.net/docs/vt510-rm/VPA}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#VPA\n     */\n    AnsiTerminal.prototype.VPA = function (params) {\n        this.cursor.row = ((params[0]) ? params[0] : 1) - 1;\n        if (this.cursor.row >= this.rows)\n            this.cursor.row = this.rows - 1;\n    };\n\n    /**\n     * ECH - Erase Character - CSI Pn X\n     * @see {@link http://vt100.net/docs/vt510-rm/ECH}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#ECH\n     */\n    AnsiTerminal.prototype.ECH = function (params) {\n        var erase = ((params[0]) ? params[0] : 1) + this.cursor.col;\n        erase = (this.cols < erase) ? this.cols : erase;\n        for (var i = this.cursor.col; i < erase; ++i) {\n            this.screen.buffer[this.cursor.row].cells[i] = new TChar('', this.textattributes, this.colors);\n        }\n        this.screen.buffer[this.cursor.row].version++;\n    };\n\n    /**\n     * IL - Insert Line - CSI Pn L\n     * @see {@link http://vt100.net/docs/vt510-rm/IL}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#IL\n     */\n    AnsiTerminal.prototype.IL = function (params) {\n        var lines = (params[0]) ? params[0] : 1;\n        do {  // FIXME ugly code - less splice possible?\n            var row = new TRow(this.cols, new TChar('', this.textattributes, this.colors));\n            this.screen.buffer.splice(this.cursor.row, 0, row);\n            this.screen.buffer.splice(this.scrolling_bottom, 1);\n        } while (--lines);\n        this.cursor.col = 0; // see http://vt100.net/docs/vt220-rm/chapter4.html\n    };\n\n    /**\n     * DECSTBM - Set Top and Bottom Margins - CSI Pt ; Pb r\n     * @see {@link http://vt100.net/docs/vt510-rm/DECSTBM}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#DECSTBM\n     * @note currently broken\n     */\n    AnsiTerminal.prototype.DECSTBM = function (params) {\n        var top = params[0] - 1 || 0;\n        var bottom = params[1] || this.rows;\n        top = (top < 0) ? 0 : ((top >= this.rows) ? (this.rows - 1) : top);\n        bottom = (bottom > this.rows) ? (this.rows) : bottom;\n        if (bottom > top) {\n            this.scrolling_top = top;\n            this.scrolling_bottom = bottom;\n        }\n        this.cursor.row = 0;\n        this.cursor.col = 0;\n    };\n\n    /**\n     * DECSTR - Soft Terminal Reset - CSI ! p\n     * @see {@link http://vt100.net/docs/vt510-rm/DECSTR}\n     * @method module:node-ansiterminal.AnsiTerminal#DECSTR\n     */\n    AnsiTerminal.prototype.DECSTR = function () {\n        // DECTCEM      Text cursor enable          --> Cursor enabled.\n        this.show_cursor = true;\n        // IRM          Insert/replace              --> Replace mode.\n        this.insert_mode = false;\n        // DECOM        Origin                      --> Absolute (cursor origin at upper-left of screen.) TODO do we need this?\n        this.CUP();  // at least move cursor home\n        // DECAWM       Autowrap                    --> No autowrap. TODO: really to false?\n        //this.autowrap = false;\n        // DECNRCM      National replacement character set  --> Multinational set. - unsupported\n        // KAM          Keyboard action             --> Unlocked. TODO\n        // DECNKM       Numeric keypad              --> Numeric characters. TODO\n        // DECCKM       Cursor keys                 --> Normal (arrow keys).\n        this.cursor_key_mode = false;\n        // DECSTBM      Set top and bottom margins  --> Top margin = 1; bottom margin = page length.\n        this.DECSTBM([]);\n        // G0, G1, G2, G3, GL, GR                   --> Default settings. - unsupported\n        this.charset = null;  // reset at least to unicode\n        // SGR          Select graphic rendition    --> Normal rendition.\n        this.SGR([0]);\n        // DECSCA       Select character attribute  --> Normal (erasable by DECSEL and DECSED). TODO do we need this?\n        // DECSC        Save cursor state           --> Home position.\n        this.DECSC();\n        // DECAUPSS     Assign user preference supplemental set     --> Set selected in Set-Up. - unsupported\n        // DECSASD      Select active status display    --> Main display. TODO do we need this?\n        // DECKPM       Keyboard position mode      --> Character codes. TODO do we need this?\n        // DECRLM       Cursor direction            --> Reset (Left-to-right), regardless of NVR setting. TODO\n        // DECPCTERM    PC Term mode                --> Always reset. TODO do we need this?\n        // TODO: do we need to reset LNM?\n    };\n\n    /**\n     * RI - Reverse Index - ESC M\n     * @method module:node-ansiterminal.AnsiTerminal#RI\n     */\n    AnsiTerminal.prototype.RI = function () {\n        this.cursor.row -= 1;\n        if (this.cursor.row < this.scrolling_top) {\n            this.cursor.row = this.scrolling_top;\n            var row = new TRow(this.cols, new TChar('', this.textattributes, this.colors));\n            this.screen.buffer.splice(this.scrolling_top, 0, row);\n            this.screen.buffer.splice(this.scrolling_bottom, 1);\n        }\n    };\n\n    /**\n     * DECSC - Save Cursor - ESC 7\n     * @see {@link http://vt100.net/docs/vt510-rm/DECSC}\n     * @method module:node-ansiterminal.AnsiTerminal#DECSC\n     */\n    AnsiTerminal.prototype.DECSC = function () {\n        var save = {};\n        save['cursor'] = {row: this.cursor.row, col: this.cursor.col};\n        save['textattributes'] = this.textattributes;\n        save['charattributes'] = this.charattributes;\n        this.cursor_save = save;\n        // FIXME: this.colors\n    };\n\n    /**\n     * DECRC - Restore Cursor - ESC 8\n     * @see {@link http://vt100.net/docs/vt510-rm/DECRC}\n     * @method module:node-ansiterminal.AnsiTerminal#DECRC\n     */\n    AnsiTerminal.prototype.DECRC = function () {\n        // FIXME: this.colors\n        if (this.cursor_save) {\n            // load data back\n            this.cursor.col = this.cursor_save['cursor'].col;\n            this.cursor.row = this.cursor_save['cursor'].row;\n            this.textattributes = this.cursor_save['textattributes'];\n            this.charattributes = this.cursor_save['charattributes'];\n        } else {\n            // see http://vt100.net/docs/vt510-rm/DECRC\n            this.CUP();\n            this.ED([2]);\n            this.textattributes = 0;\n            this.charattributes = 0;\n        }\n    };\n\n    AnsiTerminal.prototype.high = function (collected, params) {\n        // TODO: separate DEC and ANSI\n        for (var i = 0; i < params.length; ++i) {\n            switch (params[i]) {\n                case    1:  this.cursor_key_mode = true; break;     // DECCKM\n                case    4:\n                    if (!collected)                                 // IRM\n                        this.insert_mode = true;\n                    else\n                        console.log('unhandled high', collected, params[i]);  // DECSCLM??\n                    break;\n                case    7:\n                    if (collected == '?')\n                        this.autowrap = true;                       // DECAWM (should be default?)\n                    else\n                        console.log('unhandled high', collected, params[i]);\n                    break;\n                case   12:\n                    if (collected == '?')\n                        this.blinking_cursor = true;\n                    else\n                        console.log('unhandled high', collected, params[i]);\n                    break;\n                case   20:\n                    if (!collected)\n                        this.newline_mode = true;                   // LNM\n                    else\n                        console.log('unhandled high', collected, params[i]);\n                    break;\n                case   25:  this.show_cursor = true; break;         // DECTCEM (default)\n                case   43:  // printer stuff not supported\n                case   44:\n                case   45:\n                case   46:\n                case   47:\n                    break; // end printer stuff\n                /* mouse handling\n                 *  - 5 exclusive mouse modes:\n                 *      9       X10 (press only)\n                 *      1000    press and release events\n                 *      1001    hilite mouse tracking (??)\n                 *      1002    cell motion tracking (press, move on pressed, release)\n                 *      1003    all (press, move, release)\n                 *  - exclusive formatting:\n                 *      1005    utf-8 mouse mode\n                 *      1006    sgr mouse mode\n                 *      1015    urxvt mouse mode (decimal)\n                 *  - special focus event: 1004 (CSI I / CSI O)\n                 * */\n                case 9:\n                case 1000:\n                case 1001:\n                case 1002:\n                case 1003:\n                    this.mouse_mode = params[i];\n                    this.changedMouseHandling(this.mouse_mode, this.mouse_protocol);\n                    break;\n                //case 1004: // focusIn/Out events\n                case 1005:\n                case 1006:\n                case 1015:\n                    this.mouse_protocol = params[i];\n                    this.changedMouseHandling(this.mouse_mode, this.mouse_protocol);\n                    break;\n                case 1049:                                          // alt buffer\n                    this.screen = this.alternate_screen;\n                    this.cursor = this.alternate_cursor;\n                    break;\n                default:\n                    console.log('unhandled high', collected, params[i]);\n            }\n        }\n    };\n\n    AnsiTerminal.prototype.low = function (collected, params) {\n        // TODO: separate DEC and ANSI\n        for (var i = 0; i < params.length; ++i) {\n            switch (params[i]) {\n                case    1:  this.cursor_key_mode = false; break;     // DECCKM (default)\n                case    4:\n                    if (!collected)                                  // IRM (default)\n                        this.insert_mode = false;\n                    else\n                        console.log('unhandled low', collected, params[i]);\n                    break;\n                case    7:\n                    if (collected == '?')\n                        this.autowrap = false;                       // DECAWM (default)\n                    else\n                        console.log('unhandled high', collected, params[i]);\n                    break;\n                case   12:\n                    if (collected == '?')\n                        this.blinking_cursor = false;\n                    else\n                        console.log('unhandled high', collected, params[i]);\n                    break;\n                case   20:\n                    if (!collected)\n                        this.newline_mode = false;                   // LNM (default)\n                    else\n                        console.log('unhandled high', collected, params[i]);\n                    break;\n                case   25:  this.show_cursor = false; break;         // DECTCEM\n                case   43:  // printer stuff not supported\n                case   44:\n                case   45:\n                case   46:\n                case   47:\n                    break; // end printer stuff\n                case 9:\n                case 1000:\n                case 1001:\n                case 1002:\n                case 1003:\n                    this.mouse_mode = 0;\n                    this.changedMouseHandling(this.mouse_mode, this.mouse_protocol);\n                    break;\n                //case 1004: // focusIn/Out events\n                case 1005:\n                case 1006:\n                case 1015:\n                    this.mouse_protocol = 0;\n                    this.changedMouseHandling(this.mouse_mode, this.mouse_protocol);\n                    break;\n                case 1049:\n                    this.screen = this.normal_screen;\n                    this.cursor = this.normal_cursor;\n                    break;\n                default:\n                    console.log('unhandled low', collected, params[i]);\n            }\n        }\n    };\n\n    // device status reports - http://vt100.net/docs/vt510-rm/DSR\n    // cursor position report - http://vt100.net/docs/vt510-rm/CPR\n    // FIXME: split and rename to DSR and CPR\n    AnsiTerminal.prototype.DSR = function (collected, params) {\n        switch (params[0]) {\n            case  5:  // DSR - just send 'OK'\n                this.send(TERM_STRING['CSI'] + '0n');\n                break;\n            case  6:  // cursor position report\n                this.send(TERM_STRING['CSI'] + collected + (this.cursor.row + 1) + ';' + (this.cursor.col + 1) + 'R');\n                break;\n            case 75:  // DSR-DIR data integrity report - just send 'ready, no errors'\n                this.send(TERM_STRING['CSI'] + '?70n');\n                break;\n            default:\n                console.log('unhandled DSR', collected, params);\n        }\n    };\n\n    /**\n     * CHA - Cursor Horizontal Absolute - CSI Pn G\n     * @see {@link http://vt100.net/docs/vt510-rm/CHA}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#CHA\n     */\n    AnsiTerminal.prototype.CHA = function (params) {\n        this.cursor.col = ((params) ? (params[0] || 1) : 1) - 1;\n        if (this.cursor.col >= this.cols)\n            this.cursor.col = this.cols - 1;\n    };\n\n    /**\n     * CUB - Cursor Backward - CSI Pn D\n     * @see {@link http://vt100.net/docs/vt510-rm/CUB}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#CUB\n     */\n    AnsiTerminal.prototype.CUB = function (params) {\n        this.cursor.col -= (params) ? (params[0] || 1) : 1;\n        if (this.cursor.col < 0)\n            this.cursor.col = 0;\n    };\n\n    /**\n     * CUD - Cursor Down - CSI Pn B\n     * @see {@link http://vt100.net/docs/vt510-rm/CUD}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#CUD\n     */\n    AnsiTerminal.prototype.CUD = function (params) {\n        this.cursor.row += (params) ? (params[0] || 1) : 1;\n        if (this.cursor.row >= this.rows)\n            this.cursor.row = this.rows - 1;\n    };\n\n    /**\n     * CUD - Cursor Forward - CSI Pn C\n     * @see {@link http://vt100.net/docs/vt510-rm/CUF}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#CUF\n     */\n    AnsiTerminal.prototype.CUF = function (params) {\n        this.cursor.col += (params) ? (params[0] || 1) : 1;\n        if (this.cursor.col >= this.cols)\n            this.cursor.col = this.cols - 1;\n    };\n\n    /**\n     * CUD - Cursor Up - CSI Pn A\n     * @see {@link http://vt100.net/docs/vt510-rm/CUU}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#CUU\n     */\n    AnsiTerminal.prototype.CUU = function (params) {\n        this.cursor.row -= (params) ? (params[0] || 1) : 1;\n        if (this.cursor.row < 0)\n            this.cursor.row = 0;\n    };\n\n    /**\n     * CUP - Cursor Position - CSI Pl ; Pc H\n     * @see {@link http://vt100.net/docs/vt510-rm/CUP}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#CUP\n     */\n    AnsiTerminal.prototype.CUP = function (params) {\n        this.cursor.row = ((params) ? (params[0] || 1) : 1) - 1;\n        if (this.cursor.row >= this.rows)\n            this.cursor.row = this.rows - 1;\n        this.cursor.col = ((params) ? (params[1] || 1) : 1) - 1;\n        if (this.cursor.col >= this.cols)\n            this.cursor.col = this.cols - 1;\n    };\n\n    /**\n     * DCH - Delete Character - CSI Pn P\n     * @see {@link http://vt100.net/docs/vt510-rm/DCH}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#DCH\n     */\n    AnsiTerminal.prototype.DCH = function (params) {\n        var removed = this.screen.buffer[this.cursor.row].cells.splice(this.cursor.col,\n            (params) ? (params[0] || 1) : 1);\n        for (var i = 0; i < removed.length; ++i)\n            this.screen.buffer[this.cursor.row].cells.push(new TChar('', this.textattributes, this.colors));\n        this.screen.buffer[this.cursor.row].version++;\n    };\n\n    /**\n     * ED - Erase in Display - CSI Ps J\n     * @see {@link http://vt100.net/docs/vt510-rm/ED}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#ED\n     */\n    AnsiTerminal.prototype.ED = function (params) {\n        var i, row;\n        switch ((params) ? params[0] : 0) {\n            case 0:\n                // from cursor to end of display\n                // remove to line end\n                this.EL([0]);\n                // clear lower lines\n                for (i = this.cursor.row + 1; i < this.rows; ++i) {\n                    row = new TRow(this.cols, new TChar('', this.textattributes, this.colors));\n                    this.screen.buffer[i] = row;\n                }\n                break;\n            case 1:\n                // from top of display to cursor\n                // clear upper lines\n                for (i = 0; i < this.cursor.row; ++i) {\n                    row = new TRow(this.cols, new TChar('', this.textattributes, this.colors));\n                    this.screen.buffer[i] = row;\n                }\n                // clear line up to cursor\n                this.EL([1]);\n                break;\n            case 2:\n                // complete display\n                for (i = 0; i < this.rows; ++i) {\n                    row = new TRow(this.cols, new TChar('', this.textattributes, this.colors));\n                    this.screen.buffer[i] = row;\n                }\n                break;\n        }\n    };\n\n    /**\n     * EL - Erase in Line - CSI Ps K\n     * @see {@link http://vt100.net/docs/vt510-rm/EL}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#EL\n     */\n    AnsiTerminal.prototype.EL = function (params) {\n        var i;\n        switch ((params) ? params[0] : 0) {\n            case 0:\n                // cursor to end of line\n                for (i = this.cursor.col; i < this.cols; ++i) {\n                    this.screen.buffer[this.cursor.row].cells[i] =\n                        new TChar('', this.textattributes, this.colors);\n                }\n                this.screen.buffer[this.cursor.row].version++;\n                break;\n            case 1:\n                // beginning of line to cursor\n                for (i = 0; i <= this.cursor.col; ++i) {\n                    this.screen.buffer[this.cursor.row].cells[i] =\n                        new TChar('', this.textattributes, this.colors);\n                }\n                this.screen.buffer[this.cursor.row].version++;\n                break;\n            case 2:\n                // complete line\n                for (i = 0; i < this.cols; ++i) {\n                    this.screen.buffer[this.cursor.row].cells[i] =\n                        new TChar('', this.textattributes, this.colors);\n                }\n                this.screen.buffer[this.cursor.row].version++;\n                break;\n        }\n    };\n\n    /**\n     * SGR - Select Graphic Rendition - CSI Ps ; Ps ... m\n     * @see {@link http://vt100.net/docs/vt510-rm/SGR}\n     * @param params\n     * @method module:node-ansiterminal.AnsiTerminal#SGR\n     */\n    AnsiTerminal.prototype.SGR = function (params) {\n        // load global attributes and colors\n        var attr = this.textattributes;\n        var colors = this.colors;\n        \n        var ext_colors = 0;\n        var RGB_mode = false;\n        var counter = 0;\n        \n        // put reverse video mode in attributes\n        // used in charattributes but not in global textattributes\n        // to mimick xterm behavior\n        if (this.reverse_video)\n            attr |= 1048576;\n        \n        for (var i=0; i<params.length; ++i) {\n            // special treatment for extended colors\n            if (ext_colors) {\n                // first run in ext_colors gives color mode\n                // sets counter to determine max consumed params\n                if (!counter) {\n                    switch (params[i]) {\n                        case 2:\n                            RGB_mode = true;\n                            counter = 3;        // eval up to 3 params\n                            // fg set SET+RGB: |(1<<26)|(1<<27)\n                            // bg set SET+RGB: |(1<<24)|(1<<25)\n                            attr |= (ext_colors==38) ? 201326592 : 50331648;\n                            break;\n                        case 5:\n                            RGB_mode = false;\n                            counter = 1;        // eval only 1 param\n                            // fg clear RGB, set SET: &~(1<<27)|(1<<26)\n                            // bg clear RGB, set SET: &~(1<<25)|(1<<24)\n                            attr = (ext_colors==38)\n                                ? (attr & ~134217728) | 67108864\n                                : (attr & ~33554432) | 16777216;\n                            break;\n                        default:\n                            // unkown mode identifier, breaks ext_color mode\n                            console.log('sgr unknown extended color mode:', ext_colors[1]);\n                            ext_colors = 0;\n                    }\n                    continue;\n                }\n                if (RGB_mode) {\n                    switch (counter) {\n                        case 3:\n                            // red\n                            attr = (ext_colors == 38)\n                                ? (attr & ~65280) | (params[i] << 8)\n                                : (attr & ~255) | params[i];\n                            break;\n                        case 2:\n                            // green\n                            colors = (ext_colors == 38) \n                                ? (colors & ~4278190080) | (params[i] << 24)\n                                : (colors & ~16711680) | (params[i] << 16);\n                            break;\n                        case 1:\n                            // blue\n                            colors = (ext_colors == 38)\n                                ? (colors & ~65280) | (params[i] << 8)\n                                : (colors & ~255) | params[i];\n                    }\n                } else {\n                    // 256 color mode\n                    // uses only lower bytes of attribute\n                    attr = (ext_colors == 38)\n                        ? (attr & ~65280) | (params[i] << 8)\n                        : (attr & ~255) | params[i];\n                }\n                counter -= 1;\n                if (!counter)\n                    ext_colors = 0;\n                continue;\n            }\n            switch (params[i]) {\n                case 0:\n                    attr = 0;\n                    break;\n                case 1:  attr |= 65536; break;    // bold on\n                case 2:  break;  // not supported (faint)\n                case 3:  attr |= 131072; break;   // italic on\n                case 4:  attr |= 262144; break;   // underline on\n                case 5:  attr |= 524288; break;   // blink on\n                case 6:  attr |= 524288; break;   // only one blinking speed\n                case 7:  attr |= 1048576; break;  // inverted on\n                case 8:  attr |= 2097152; break;  // conceal on\n                case 9:  break;  // not supported (crossed out)\n                case 10:         // not supported (font selection)\n                case 11:\n                case 12:\n                case 13:\n                case 14:\n                case 15:\n                case 16:\n                case 17:\n                case 18:\n                case 19:  break;\n                case 20:  break;  // not supported (fraktur)\n                case 21:  break;  // not supported (bold: off or underline: double)\n                case 22:  attr &= ~65536; break;      // bold off\n                case 23:  attr &= ~131072; break;     // italic off\n                case 24:  attr &= ~262144; break;     // underline off\n                case 25:  attr &= ~524288; break;     // blink off\n                case 26:  break;  // reserved\n                case 27:  attr &= ~1048576; break;    // inverted off\n                case 28:  attr &= ~2097152; break;    // conceal off\n                case 29:  break;  // not supported (not crossed out)\n                case 30:\n                case 31:\n                case 32:\n                case 33:\n                case 34:\n                case 35:\n                case 36:\n                case 37:\n                    // clear fg RGB, nullify fg, set fg SET, color\n                    // -134283009 = ~(1<<27) & ~(255<<8)\n                    attr = (attr & -134283009) | 67108864 | (params[i]%10 << 8);\n                    break;\n                case 38:  ext_colors = 38; break;\n                case 39:                                    // default foreground color\n                    attr &= ~67108864;            // fg set to false (1<<26)\n                    break;\n                case 40:\n                case 41:\n                case 42:\n                case 43:\n                case 44:\n                case 45:\n                case 46:\n                case 47:\n                    // clear bg RGB, nullify bg, set bg SET, color\n                    // -33554688 = ~(1<<25) & ~255\n                    attr = (attr & -33554688) | 16777216 | params[i]%10;\n                    break;\n                case 48:  ext_colors = 48; break;\n                case 49:                                    // default background color\n                    attr &= ~16777216;            // bg set to false\n                    break;\n                case 90:\n                case 91:\n                case 92:\n                case 93:\n                case 94:\n                case 95:\n                case 96:\n                case 97:\n                    // same as 37 but with |8 in color\n                    attr = (attr & -134283009) | 67108864 | (params[i]%10|8 << 8);\n                    break;\n                case 100:\n                case 101:\n                case 102:\n                case 103:\n                case 104:\n                case 105:\n                case 106:\n                case 107:\n                    // same as 47 but with |8 in color\n                    attr = (attr & -33554688) | 16777216 | params[i]%10|8;\n                    break;\n                default:\n                    console.log('sgr unknown:', params[i]);\n            }\n        }\n        \n        // apply new attributes\n        // charattributes differs only in reverse mode\n        // for now from textattributes\n        this.charattributes = attr;\n        \n        // set reverse video and delete it from attributes\n        this.reverse_video = !!(attr & 1048576);\n        attr &= ~1048576;\n        \n        // set new global attributes\n        this.textattributes = attr;\n        this.colors = colors;\n    };\n\n    /**\n     * default DCS handler\n     */\n\n    /**\n     * DCS dummy handler\n     *\n     * This is a dummy for a dcs handler. It handles all DCS sequences that have no\n     * real implementation.\n     *\n     * @function module:node-ansiterminal.DCS_Dummy\n     */\n    function DCS_Dummy() {\n        return new (function() {\n            this.hook = function (term, collected, params, flag) {\n                console.log('inst_H unhandled:', collected, params, flag);\n            };\n            this.feed = function (data) {\n                console.log('inst_P unhandled:', data);\n            };\n            this.unhook = function () {\n            };\n        })();\n    }\n\n    /**\n     * DECRQSS - Request Selection or Setting - DCS $ q D..D ST\n     *\n     * DCS handler for DECRQSS. Currently only SGR and DECSTBM reports are fully implemented.\n     *\n     * Difference to DEC specification - P1 for valid, P0 for invalid request\n     * (following the xterm scheme)\n     *\n     * @see {@link http://www.vt100.net/docs/vt510-rm/DECRQSS.html}\n     * @function module:node-ansiterminal.DCS_DECRQSS\n     */\n    function DCS_DECRQSS() {\n        return new (function () {\n            this.term = null;\n            this.data = '';\n            this.limit = 5;\n            this.hook = function(term) {\n                this.term = term;\n                this.data = '';\n            };\n            this.feed = function(data) {\n                if (this.data.length<this.limit)\n                    this.data += data;\n            };\n            this.unhook = function() {\n                switch (this.data) {\n                    case '\"q':                          // TODO: DECSCA\n                        return this.term.send('');\n                    case '\"p':                          // TODO: DECSCL\n                        return this.term.send('\\x1bP1$r64;1\"p\\x1b\\\\');\n                    case 'r':                           // DECSTBM\n                        var t = this.term.scrolling_top + 1;\n                        var b = this.term.scrolling_bottom + 1;\n                        return this.term.send('\\x1bP1$r' + t + ';' + b + 'r\\x1b\\\\');\n                    case 'm':                           // SGR\n                        var s = '0';\n                        if (this.term.textattributes)\n                            s += ';' + _get_escape_string(0, this.term.textattributes,\n                                                          0, this.term.colors);\n                        return this.term.send('\\x1bP1$r' + s + 'm\\x1b\\\\');\n                    default:                            // unrecognized command\n                        this.term.send('\\x1bP0$r\\x1b\\\\');\n                }\n            };\n        })();\n    }\n\n    var to_export = {\n        wcswidth: wcswidth,\n        TChar: TChar,\n        TRow: TRow,\n        TScreen: TScreen,\n        AnsiTerminal: AnsiTerminal\n    };\n\n    /* istanbul ignore next */\n    if (typeof module !== 'undefined' && typeof module['exports'] !== 'undefined') {\n        module['exports'] = to_export;\n    } else {\n        if (typeof define === 'function' && define['amd']) {\n            define([], function() {\n                return to_export;\n            });\n        } else {\n            window['ansiterminal'] = to_export;\n        }\n    }\n})();","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import _typeof from \"@babel/runtime/helpers/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}"],"names":["r","a","b","c","arr","Array","add","table","inp","state","action","next","undefined","add_list","inps","i","length","PRINTABLES","EXECUTABLES","push","concat","TRANSITION_TABLE","t","Uint8Array","code","AnsiParser","terminal","this","initial_state","current_state","transitions","set","osc","params","collected","term","instructions","prototype","reset","parse","s","transition","error","printed","dcs","l","charCodeAt","inst_p","substring","inst_x","String","fromCharCode","inst_P","inst_E","pos","character","print","collect","inst_c","inst_e","inst_H","inst_U","charAt","inst_o","module","exports","wcswidth","_WIDTH_COMBINING","_width_wcwidth","ucs","opts","nul","control","mid","min","max","Math","floor","_width_bisearch","_WIDTH_DEFAULTS","str","n","TChar","attr","gb","width","trimRight","replace","clone","equals","other","serialize","deserialize","o","getAttributes","colorbits","g","bits","bold","italic","underline","blink","inverse","conceal","foreground","RGB","color","background","getJSONAttributes","setAttributes","attributes","map","el","_uniqueId","TRow","tchar","uniqueId","version","doubled","overflow","cells","_get_escape_string","attr_old","attr_new","gb_old","gb_new","diff","result","join","content","row","toString","options","rtrim","empty_cell","hasOwnProperty","toMergedArray","stack","parseInt","elem","last","pop","toJSON","json","string","toEscapeString","old_attr","old_gb","_DEFAULT_COLORS","get_color","value","digits","base","_get_html_styles","style_","class_","classes","blinkanimation","tmp","mode","fg","colors","trim","TScreen","cols","rows","scrollLength","Infinity","buffer","scrollbuffer","toHTML","escape_html","parts","p","html","_apply_row_attributes","serialized_buffer","serialized_scrollbuffer","sb","appendToScrollBuffer","shift","fetchFromScrollBuffer","resize","cursor","unshift","remove","append","col","resize_reflow","line","cell","temp_ar","a_line","right","bottom","final_buffer","trow","offset","CHARSET_0","BOXSYMBOLS_BOLD","TERM_STRING","AnsiTerminal","send","beep","tone","duration","changedMouseHandling","protocol","DCS_DECRQSS","data","limit","hook","feed","unhook","scrolling_top","scrolling_bottom","textattributes","normal_screen","alternate_screen","screen","normal_cursor","alternate_cursor","charattributes","reverse_video","cursor_key_mode","show_cursor","title","cursor_save","insert_mode","blinking_cursor","autowrap","newline_mode","tab_width","last_char","mouse_mode","mouse_protocol","mouseDown","_rem_c","wrap","row_wrap","dcs_handler","dcs_handlers","registerDCSHandler","G0","G1","charset","active_charset","reflow","resize_func","DECSC","handler","flag","unregisterDCSHandler","prop","debug","console","log","low","SU","splice","slice","CHT","ICH","CNL","CPL","CHA","CUB","CUD","CUF","CUU","CBT","CUP","DCH","ED","EL","IL","DL","SD","ECH","HPR","REP","VPR","VPA","high","SGR","DSR","DECSTBM","DECRC","HPA","DECSTR","DECDHL","DECSWL","DECDWL","DECALN","IND","NEL","RI","Handler","param","j","lines","scrolled_out","chars","erase","top","save","removed","ext_colors","RGB_mode","counter","to_export","_assertThisInitialized","self","ReferenceError","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","constructor","_possibleConstructorReturn","call","_setPrototypeOf","_typeof","obj","Symbol","iterator"],"sourceRoot":""}